#!/usr/bin/env python3
# main_interface.py
## –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º wg_qr_generator

import sys
import os
import gradio as gr
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from gradio_admin.create_user import create_user
from gradio_admin.delete_user import delete_user
from gradio_admin.search_user import search_user
from gradio_admin.wg_users_stats import load_data  # –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time(iso_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ ISO 8601 –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        dt = datetime.fromisoformat(iso_time)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return "N/A"


def calculate_time_remaining(expiry_time):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è."""
    try:
        dt_expiry = datetime.fromisoformat(expiry_time)
        delta = dt_expiry - datetime.now()
        if delta.days >= 0:
            return f"{delta.days} –¥–Ω–µ–π"
        return "–ò—Å—Ç—ë–∫"
    except Exception:
        return "N/A"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def update_table(show_inactive):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —à–µ—Å—Ç—å—é —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    table = load_data(show_inactive)
    formatted_rows = []

    for row in table:
        username = row[0]
        allowed_ips = row[2]
        recent = row[5]
        endpoint = row[1] or "N/A"
        up = row[4]
        down = row[3]
        status = row[6]
        created = row[7] if len(row) > 7 else "N/A"
        expires = row[8] if len(row) > 8 else "N/A"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        recent_emoji = "üü¢" if status == "active" else "üî¥"
        state_emoji = "‚úÖ" if status == "active" else "‚ùå"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_rows.append([f"üë§ User account : {username}", f"üìß User e-mail : user@mail.wg"])
        formatted_rows.append([f"üìÖ Created : {format_time(created)}", f"‚åö Ex : {format_time(expires)}"])
        formatted_rows.append([f"üåê intIP {recent_emoji}  : {allowed_ips}", f"‚¨ÜÔ∏è up : {up}"])
        formatted_rows.append([f"üåé extIP {recent_emoji}  : {endpoint}", f"‚¨áÔ∏è dw : {down}"])
        formatted_rows.append([f"‚è≥ TimeLeft : {calculate_time_remaining(expires)}", f"State : {state_emoji}"])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        formatted_rows.append(["", ""])

    return formatted_rows


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(css="style.css") as admin_interface:
    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with gr.Tab("–°–æ–∑–¥–∞—Ç—å"):
        with gr.Row():
            gr.Markdown("## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with gr.Column(scale=1, min_width=300):
            username_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            create_button = gr.Button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            create_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è", interactive=False)
            qr_code_image = gr.Image(label="QR-–∫–æ–¥", visible=False)

            def handle_create_user(username):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞."""
                result, qr_code_path = create_user(username)
                if qr_code_path:
                    return result, gr.update(visible=True, value=qr_code_path)
                return result, gr.update(visible=False)

            create_button.click(
                handle_create_user,
                inputs=username_input,
                outputs=[create_output, qr_code_image]
            )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with gr.Tab("–£–¥–∞–ª–∏—Ç—å"):
        with gr.Row():
            gr.Markdown("## –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with gr.Column(scale=1, min_width=300):
            delete_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            delete_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è", interactive=False)
            delete_button.click(delete_user, inputs=delete_input, outputs=delete_output)

# –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#    with gr.Tab("–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
#        with gr.Row():
#            gr.Markdown("## –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
#        with gr.Column(scale=1, min_width=300):
#            search_input = gr.Textbox(label="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ IP", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞...")
#            search_button = gr.Button("–ü–æ–∏—Å–∫")
#            search_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", interactive=False)
#            search_button.click(search_user, inputs=search_input, outputs=search_output)

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
    with gr.Tab("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        with gr.Row():
            gr.Markdown("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        with gr.Column(scale=1, min_width=300):
            search_input = gr.Textbox(label="–ü–æ–∏—Å–∫", placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
            refresh_button = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å")
            show_inactive = gr.Checkbox(label="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", value=True)
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=["üë§üìÖ User's info", "‚¨ÜÔ∏è‚¨áÔ∏è Other info "],
                value=update_table(True),
                interactive=False,
                wrap=True
            )

            def update_table(show_inactive):
                """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —à–µ—Å—Ç—å—é —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
                table = load_data(show_inactive)
                formatted_rows = []

                for row in table:
                    username = row[0]
                    allowed_ips = row[2]
                    recent = row[5]
                    endpoint = row[1] or "N/A"
                    up = row[4]
                    down = row[3]
                    status = row[6]
                    created = row[7] if len(row) > 7 else "N/A"
                    expires = row[8] if len(row) > 8 else "N/A"

                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    recent_emoji = "üü¢" if status == "active" else "üî¥"
                    state_emoji = "‚úÖ" if status == "active" else "‚ùå"

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    formatted_rows.append([f"üë§ User account : {username}", f"üìß User mail : user@mail.wg"])
                    formatted_rows.append([f"üìÖ Created : {format_time(created)}", f"‚åö Ex : {format_time(expires)}"])
                    formatted_rows.append([f"üåê int. {recent_emoji}  : {allowed_ips}", f"‚¨ÜÔ∏è up : {up}"])
                    formatted_rows.append([f"üåé ext. {recent_emoji}  : {endpoint}", f"‚¨áÔ∏è dw : {down}"])
                    formatted_rows.append([f"‚è≥ TimeLeft : {calculate_time_remaining(expires)}", f"State : {state_emoji}"])

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    formatted_rows.append(["", ""])

                return formatted_rows

            def search_and_update_table(query, show_inactive):
                """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
                table = update_table(show_inactive)
                if query:
                    table = [row for row in table if query.lower() in " ".join(map(str, row)).lower()]
                print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞: {table}")  # –û—Ç–ª–∞–¥–∫–∞
                return table

            search_input.change(
                fn=search_and_update_table,
                inputs=[search_input, show_inactive],
                outputs=[stats_table]
            )

            refresh_button.click(
                fn=update_table,
                inputs=[show_inactive],
                outputs=[stats_table]
            )

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if __name__ == "__main__":
    admin_interface.launch(server_name="0.0.0.0", server_port=7860, share=True)
