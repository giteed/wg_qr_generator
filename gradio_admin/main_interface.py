#!/usr/bin/env python3
# main_interface.py
# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º wg_qr_generator

import os
import sys
import socket
import gradio as gr
import psutil
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏
from gradio_admin.tabs.delete_user_tab import delete_user_tab
from gradio_admin.tabs.statistics_tab import statistics_tab
from gradio_admin.create_user import create_user

USER_RECORDS_JSON = "user/data/user_records.json"
DEFAULT_PORT = 7860

def check_port(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        return sock.connect_ex(('0.0.0.0', port)) == 0

def release_port(port):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    for proc in psutil.process_iter(attrs=["pid", "name", "connections"]):
        try:
            for conn in proc.info["connections"] or []:
                if conn.laddr.port == port:
                    print(f"üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç {port}, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']}.")
                    proc.terminate()
                    proc.wait(timeout=3)
                    return
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")

def ensure_port_available(port):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ."""
    if check_port(port):
        print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç.")
        release_port(port)
        if check_port(port):
            raise RuntimeError(f"‚ùå –ü–æ—Ä—Ç {port} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.")

def save_user_to_json(username, allowed_ips):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_records.json."""
    if not os.path.exists(USER_RECORDS_JSON):
        records = {}
    else:
        with open(USER_RECORDS_JSON, "r") as file:
            records = json.load(file)

    records[username] = {"allowed_ips": allowed_ips, "status": "active"}
    with open(USER_RECORDS_JSON, "w") as file:
        json.dump(records, file, indent=4)

    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ JSON.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(css="style.css") as admin_interface:
    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with gr.Tab("üå± Create"):
        with gr.Row():
            gr.Markdown("## Create a new user")
        with gr.Column(scale=1, min_width=300):
            username_input = gr.Textbox(label="Username", placeholder="Enter username...")
            allowed_ips_input = gr.Textbox(label="Allowed IPs", placeholder="Enter allowed IPs...")
            create_button = gr.Button("Create User")
            create_output = gr.Textbox(label="Result", interactive=False)
            qr_code_image = gr.Image(label="QR Code", visible=False)

            def handle_create_user(username, allowed_ips):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞."""
                result, qr_code_path = create_user(username)
                save_user_to_json(username, allowed_ips)
                if qr_code_path:
                    return result, gr.update(visible=True, value=qr_code_path)
                return result, gr.update(visible=False)

            create_button.click(
                handle_create_user,
                inputs=[username_input, allowed_ips_input],
                outputs=[create_output, qr_code_image]
            )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    delete_user_tab()

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
    statistics_tab()

if __name__ == "__main__":
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ {DEFAULT_PORT}...")
        ensure_port_available(DEFAULT_PORT)
        print(f"‚úÖ –ü–æ—Ä—Ç {DEFAULT_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ Gradio.")
        admin_interface.launch(server_name="0.0.0.0", server_port=DEFAULT_PORT, share=True)
    except RuntimeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
