#!/usr/bin/env python3
# main_interface.py
## –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º wg_qr_generator

import sys
import os
import gradio as gr
from datetime import datetime
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from gradio_admin.create_user import create_user
from gradio_admin.delete_user import delete_user
from gradio_admin.wg_users_stats import load_data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time(iso_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ ISO 8601 –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        dt = datetime.fromisoformat(iso_time)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return "N/A"


def calculate_time_remaining(expiry_time):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è."""
    try:
        dt_expiry = datetime.fromisoformat(expiry_time)
        delta = dt_expiry - datetime.now()
        if delta.days >= 0:
            return f"{delta.days} –¥–Ω–µ–π"
        return "–ò—Å—Ç—ë–∫"
    except Exception:
        return "N/A"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def update_table(show_inactive):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —à–µ—Å—Ç—å—é —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    table = load_data(show_inactive)
    formatted_rows = []

    for row in table:
        username = row[0] if len(row) > 0 else "N/A"
        allowed_ips = row[2] if len(row) > 2 else "N/A"
        recent = row[5] if len(row) > 5 else "N/A"
        endpoint = row[1] if len(row) > 1 else "N/A"
        up = row[4] if len(row) > 4 else "N/A"
        down = row[3] if len(row) > 3 else "N/A"
        status = row[6] if len(row) > 6 else "N/A"
        created = row[7] if len(row) > 7 else "N/A"
        expires = row[8] if len(row) > 8 else "N/A"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        recent_emoji = "üü¢" if status == "active" else "üî¥"
        state_emoji = "‚úÖ" if status == "active" else "‚ùå"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_rows.append([f"üë§ User account : {username}", f"üìß User e-mail : user@mail.wg"])
        formatted_rows.append([f"üå± Created : {format_time(created)}", f"üî• Expires : {format_time(expires)}"])
        formatted_rows.append([f"üåê intIP {recent_emoji}  : {allowed_ips}", f"‚¨ÜÔ∏è up : {up}"])
        formatted_rows.append([f"üåé extIP {recent_emoji}  : {endpoint}", f"‚¨áÔ∏è dw : {down}"])
        formatted_rows.append([f"üìÖ TimeLeft : {calculate_time_remaining(expires)}", f"State : {state_emoji}"])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        formatted_rows.append(["", ""])

    return formatted_rows


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(css="style.css") as admin_interface:
    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with gr.Tab("üå± –°–æ–∑–¥–∞—Ç—å"):
        with gr.Row():
            gr.Markdown("## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with gr.Column(scale=1, min_width=300):
            username_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            create_button = gr.Button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            create_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è", interactive=False)
            qr_code_image = gr.Image(label="QR-–∫–æ–¥", visible=False)

            def handle_create_user(username):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞."""
                result, qr_code_path = create_user(username)
                if qr_code_path:
                    return result, gr.update(visible=True, value=qr_code_path)
                return result, gr.update(visible=False)

            create_button.click(
                handle_create_user,
                inputs=username_input,
                outputs=[create_output, qr_code_image]
            )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with gr.Tab("üî• –£–¥–∞–ª–∏—Ç—å"):
        with gr.Row():
            gr.Markdown("## –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with gr.Column(scale=1, min_width=300):
            delete_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            delete_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è", interactive=False)
            delete_button.click(delete_user, inputs=delete_input, outputs=delete_output)

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
    with gr.Tab("üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        with gr.Row():
            gr.Markdown("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        with gr.Column(scale=1, min_width=300):
            search_input = gr.Textbox(label="–ü–æ–∏—Å–∫", placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
            refresh_button = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å")
            show_inactive = gr.Checkbox(label="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", value=True)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with gr.Row():
            selected_user_info = gr.Textbox(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", interactive=False)
        with gr.Row():
            block_button = gr.Button("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")
            delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å")

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=["üë• User's info", "üÜî Other info"],
                value=update_table(True),
                interactive=True,
                wrap=True
            )

def show_user_info(selected_data, query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    print("[DEBUG] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_user_info")  # –û—Ç–ª–∞–¥–∫–∞
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å (query): {query}")  # –û—Ç–ª–∞–¥–∫–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫
    if not query.strip():
        return "Please enter a query to filter user data and then click a cell to view user details and perform actions."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    print(f"[DEBUG] –î–∞–Ω–Ω—ã–µ selected_data: {selected_data}")  # –û—Ç–ª–∞–¥–∫–∞
    if selected_data is None or (isinstance(selected_data, pd.DataFrame) and selected_data.empty):
        return "Select a row from the table!"
    try:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞
        if isinstance(selected_data, list):
            print(f"[DEBUG] –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: list, –¥–∞–Ω–Ω—ã–µ: {selected_data}")  # –û—Ç–ª–∞–¥–∫–∞
            row = selected_data
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame
        elif isinstance(selected_data, pd.DataFrame):
            print(f"[DEBUG] –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: DataFrame, –¥–∞–Ω–Ω—ã–µ:\n{selected_data}")  # –û—Ç–ª–∞–¥–∫–∞
            row = selected_data.iloc[0].values
        else:
            return "Unsupported data format!"

        print(f"[DEBUG] –ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (row): {row}")  # –û—Ç–ª–∞–¥–∫–∞

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è—è –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        username = row[0].replace("üë§ User account : ", "") if len(row) > 0 else "N/A"
        email = "user@mail.wg"  # –ó–∞–≥–ª—É—à–∫–∞
        created = "N/A" if len(row) <= 1 else row[1].replace("üå± Created : ", "N/A")
        expires = "N/A" if len(row) <= 2 else row[2].replace("üî• Expires : ", "N/A")
        int_ip = "N/A" if len(row) <= 3 else row[3].replace("üåê intIP : ", "N/A")
        ext_ip = "N/A" if len(row) <= 4 else row[4].replace("üåé extIP : ", "N/A")
        up = "N/A" if len(row) <= 5 else row[5].replace("‚¨ÜÔ∏è up : ", "N/A")
        down = "N/A" if len(row) <= 6 else row[6].replace("‚¨áÔ∏è dw : ", "N/A")
        state = "N/A" if len(row) <= 7 else row[7].replace("State : ", "N/A")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
        user_info = f"""
üë§ User: {username}
üìß Email: {email}
üå± Created: {created}
üî• Expires: {expires}
üåê Internal IP: {int_ip}
üåé External IP: {ext_ip}
‚¨ÜÔ∏è Uploaded: {up}
‚¨áÔ∏è Downloaded: {down}
‚úÖ Status: {state}
"""
        print(f"[DEBUG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{user_info}")  # –û—Ç–ª–∞–¥–∫–∞
        return user_info.strip()
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        return f"Error processing data: {str(e)}"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats_table.select(
            fn=show_user_info,
            inputs=[stats_table, search_input],
            outputs=[selected_user_info]
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
        refresh_button.click(
            fn=update_table,
            inputs=[show_inactive],
            outputs=[stats_table]
        )

        # –ü–æ–∏—Å–∫
        def search_and_update_table(query, show_inactive):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
            table = update_table(show_inactive)
            if query:
                table = [
                    row for row in table if query.lower() in " ".join(map(str, row)).lower()
                ]
            return table

        search_input.change(
            fn=search_and_update_table,
            inputs=[search_input, show_inactive],
            outputs=[stats_table]
        )

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if __name__ == "__main__":
    admin_interface.launch(server_name="0.0.0.0", server_port=7860, share=True)
