#!/usr/bin/env python3
# main_interface.py
## –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º wg_qr_generator

import sys
import os
import json
import gradio as gr
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from gradio_admin.create_user import create_user
from gradio_admin.delete_user import delete_user
from gradio_admin.wg_users_stats import load_data  # –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_time(iso_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ ISO 8601 –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        dt = datetime.fromisoformat(iso_time)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return "N/A"


def calculate_time_remaining(expiry_time):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è."""
    try:
        dt_expiry = datetime.fromisoformat(expiry_time)
        delta = dt_expiry - datetime.now()
        if delta.days >= 0:
            return f"{delta.days} days"
        return "Expired"
    except Exception:
        return "N/A"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
def update_table(show_inactive):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
    table = load_data(show_inactive)
    formatted_rows = []

    for row in table:
        username = row[0]
        allowed_ips = row[2]
        recent = row[5]
        endpoint = row[1] or "N/A"
        up = row[4]
        down = row[3]
        status = row[6]
        created = row[7] if len(row) > 7 else "N/A"
        expires = row[8] if len(row) > 8 else "N/A"

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        recent_emoji = "üü¢" if status == "active" else "üî¥"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_rows.append([f"üë§ {username}", f"‚¨ÜÔ∏è {up}"])
        formatted_rows.append([f"üåê intIP {recent_emoji}  : {allowed_ips}", f"‚¨áÔ∏è {down}"])
        formatted_rows.append([f"üåé extIP {recent_emoji}  : {endpoint}", f"üìÖ TimeLeft: {calculate_time_remaining(expires)}"])
        formatted_rows.append(["", ""])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    return formatted_rows


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def load_user_info(username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    user_records_path = "/root/pyWGgen/wg_qr_generator/user/data/user_records.json"
    user_data = {}

    try:
        with open(user_records_path, "r") as f:
            user_data = json.load(f)
    except FileNotFoundError:
        print(f"[DEBUG] File not found: {user_records_path}")
    except Exception as e:
        print(f"[DEBUG] Error reading user records: {e}")

    user_info = user_data.get(username, {})
    created = format_time(user_info.get("created_at", "N/A"))
    expires = format_time(user_info.get("expires_at", "N/A"))
    address = user_info.get("address", "N/A")

    return f"""
üë§ User: {username}
üìß Email: user@mail.wg
üå± Created: {created}
üî• Expires: {expires}
üåê Internal IP: {address}
üåé External IP: N/A
‚¨ÜÔ∏è Uploaded: N/A
‚¨áÔ∏è Downloaded: N/A
‚úÖ Status: N/A
"""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def show_user_info(selected_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        print("[DEBUG] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_user_info")
        print(f"[DEBUG] Selected data raw: {selected_data}")

        if selected_data is None or len(selected_data) == 0:
            return "First select data from the table!"

        if isinstance(selected_data, list) and len(selected_data) == 1:
            clicked_cell = selected_data[0]
            print(f"[DEBUG] Clicked cell: {clicked_cell}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª–∏–∫–∞
            for row in update_table(True):
                if clicked_cell in row:
                    username = row[0].replace("üë§ ", "")  # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
                    print(f"[DEBUG] Extracted username: {username}")

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = load_user_info(username)
                    print(f"[DEBUG] User info:\n{user_info}")
                    return user_info.strip()

        return "Error: could not determine the user from the selected data."
    except Exception as e:
        print(f"[DEBUG] Error: {e}")
        return f"Error processing data: {str(e)}"


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(css="style.css") as admin_interface:
    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with gr.Tab("Create"):
        with gr.Row():
            gr.Markdown("## Create a new user")
        with gr.Column(scale=1, min_width=300):
            username_input = gr.Textbox(label="Username", placeholder="Enter username...")
            create_button = gr.Button("Create User")
            create_output = gr.Textbox(label="Creation Result", interactive=False)
            qr_code_image = gr.Image(label="QR Code", visible=False)

            def handle_create_user(username):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞."""
                result, qr_code_path = create_user(username)
                if qr_code_path:
                    return result, gr.update(visible=True, value=qr_code_path)
                return result, gr.update(visible=False)

            create_button.click(
                handle_create_user,
                inputs=username_input,
                outputs=[create_output, qr_code_image]
            )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with gr.Tab("Delete"):
        with gr.Row():
            gr.Markdown("## Delete a user")
        with gr.Column(scale=1, min_width=300):
            delete_input = gr.Textbox(label="Username to delete", placeholder="Enter username...")
            delete_button = gr.Button("Delete User")
            delete_output = gr.Textbox(label="Deletion Result", interactive=False)
            delete_button.click(delete_user, inputs=delete_input, outputs=delete_output)

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
    with gr.Tab("Statistics"):
        with gr.Row():
            gr.Markdown("## User Statistics")
        with gr.Row():
            search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...")
            refresh_button = gr.Button("Refresh")
            show_inactive = gr.Checkbox(label="Show inactive", value=True)
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=["üë• User's info", "üÜî Other info"],
                value=update_table(True),
                interactive=False,
                wrap=True
            )
        with gr.Row():
            user_info_output = gr.Textbox(label="User Information", interactive=False)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        search_input.change(
            fn=lambda query, show_inactive: [
                update_table(show_inactive),
                "",
            ],
            inputs=[search_input, show_inactive],
            outputs=[stats_table, user_info_output],
        )

        refresh_button.click(
            fn=lambda show_inactive: update_table(show_inactive),
            inputs=[show_inactive],
            outputs=[stats_table],
        )

        stats_table.select(
            fn=show_user_info,
            inputs=[stats_table],
            outputs=[user_info_output],
        )

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if __name__ == "__main__":
    admin_interface.launch(server_name="0.0.0.0", server_port=7860, share=True)
