#!/usr/bin/env python3
# statistics_tab.py
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ wg_qr_generator

import gradio as gr
import pandas as pd
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}

    with open(USER_DB_PATH, "r") as f:
        return json.load(f)


def prepare_table_data(show_inactive=True):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."""
    user_records = load_user_records()
    table_data = []

    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        table_data.append({
            "User": user.get("username", "N/A"),
            "Used": user.get("data_used", "0.0 KiB"),
            "Limit": user.get("data_limit", "100.0 GB"),
            "Status": user.get("status", "inactive"),
            "Price": user.get("subscription_price", "0.00 USD"),
            "UID": user.get("user_id", "N/A")
        })

    return pd.DataFrame(table_data)


def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    with gr.Tab("üîç Statistics"):
        with gr.Row():
            gr.Markdown("## User Statistics")

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with gr.Row():
            show_inactive = gr.Checkbox(label="Show inactive users", value=True)
            refresh_button = gr.Button("Refresh Table")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        with gr.Row():
            search_input = gr.Textbox(label="Search", placeholder="Enter text to filter...")

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_table = gr.Dataframe(
            headers=["User", "Used", "Limit", "Status", "Price", "UID", "Action"],
            interactive=False
        )

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with gr.Row():
            user_info_display = gr.Textbox(
                label="User Information",
                interactive=False,
                value="Select a user to view their details."
            )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        with gr.Row():
            block_button = gr.Button("Block User")
            delete_button = gr.Button("Delete User")

        # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        def update_table(show_inactive, search_query):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
            df = prepare_table_data(show_inactive)
            if search_query.strip():
                df = df[df.apply(
                    lambda row: search_query.lower() in row.to_string().lower(), axis=1
                )]
            df["Action"] = df["UID"].apply(lambda uid: f"View ({uid[:6]}...)")
            return df.drop(columns=["UID"])

        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        def show_user_info(action):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ UID."""
            uid = action.split()[1].strip("()")
            user_records = load_user_records()
            user_info = next(
                (info for info in user_records.values() if info.get("user_id") == uid),
                None
            )
            if not user_info:
                return f"No user found with UID: {uid}"
            return json.dumps(user_info, indent=4, ensure_ascii=False)

        # –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def block_user(action):
            """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            uid = action.split()[1].strip("()")
            user_records = load_user_records()
            user = next(
                (info for info in user_records.values() if info.get("user_id") == uid),
                None
            )
            if not user:
                return "User not found."
            user["status"] = "blocked"
            with open(USER_DB_PATH, "w") as f:
                json.dump(user_records, f, indent=4)
            return f"User {user.get('username', 'N/A')} has been blocked."

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º
        refresh_button.click(
            fn=lambda show_inactive, search_query: update_table(show_inactive, search_query),
            inputs=[show_inactive, search_input],
            outputs=[user_table]
        )

        user_table.select(
            fn=show_user_info,
            inputs=[user_table],
            outputs=[user_info_display]
        )

        block_button.click(
            fn=block_user,
            inputs=[user_table],
            outputs=[user_info_display]
        )

        delete_button.click(
            fn=lambda action: f"Delete user with UID: {action.split()[1].strip('()')}",
            inputs=[user_table],
            outputs=[user_info_display]
        )
