#!/usr/bin/env python3
# statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ wg_qr_generator

import gradio as gr
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}
    with open(USER_DB_PATH, "r") as f:
        return json.load(f)


def prepare_user_choices(show_inactive=True):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Dropdown."""
    user_records = load_user_records()
    user_choices = []
    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        user_choices.append(f"{user['username']} ({user['user_id']})")
    return user_choices


def filter_user_choices(search_query, show_inactive):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞."""
    choices = prepare_user_choices(show_inactive)
    if search_query:
        choices = [choice for choice in choices if search_query.lower() in choice.lower()]
    return {"choices": choices, "value": None}


def get_user_info(selected_user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    if not selected_user:
        return (
            "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. "
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è."
        )
    
    user_id = selected_user.split("(")[-1].strip(")")
    user_records = load_user_records()
    for user in user_records.values():
        if user.get("user_id") == user_id:
            return json.dumps(user, indent=4)
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."


def dummy_action(selected_user):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π."""
    if not selected_user:
        return "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    return f"–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {selected_user}"


def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    with gr.Tab("üîç Statistics"):
        gr.Markdown("## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ WireGuard")

        # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with gr.Row():
            show_inactive_checkbox = gr.Checkbox(label="Show inactive users", value=True)
            refresh_button = gr.Button("Refresh")

        # –ü–æ–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info_box = gr.Textbox(
            label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
            lines=10,
            interactive=False,
            value=(
                "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. "
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è."
            )
        )

        # –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        with gr.Row():
            block_button = gr.Button("Block")
            delete_button = gr.Button("Delete")
            archive_button = gr.Button("Archive")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        with gr.Row():
            search_box = gr.Textbox(
                label="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç—É—Ç",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞...",
                interactive=True
            )
            user_dropdown = gr.Dropdown(
                choices=prepare_user_choices(),
                label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                interactive=True,
                value=None
            )

        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–π
        def update_user_choices(search_query, show_inactive):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞."""
            return filter_user_choices(search_query, show_inactive)

        refresh_button.click(
            fn=lambda show_inactive: {"choices": prepare_user_choices(show_inactive), "value": None},
            inputs=[show_inactive_checkbox],
            outputs=user_dropdown
        )
        search_box.change(
            fn=update_user_choices,
            inputs=[search_box, show_inactive_checkbox],
            outputs=user_dropdown
        )
        user_dropdown.change(
            fn=get_user_info,
            inputs=[user_dropdown],
            outputs=user_info_box
        )
        block_button.click(
            fn=dummy_action,
            inputs=[user_dropdown],
            outputs=user_info_box
        )
        delete_button.click(
            fn=dummy_action,
            inputs=[user_dropdown],
            outputs=user_info_box
        )
        archive_button.click(
            fn=dummy_action,
            inputs=[user_dropdown],
            outputs=user_info_box
        )
