#!/usr/bin/env python3
# gradio_admin/tabs/statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import gradio as gr
import pandas as pd
import os
import json
from gradio_admin.functions.table_helpers import update_table
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}

    with open(USER_DB_PATH, "r") as f:
        return json.load(f)

def statistics_tab():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    with gr.Tab("üîç Statistics"):
        with gr.Row():
            gr.Markdown("## User Statistics")

        # –ß–µ–∫–±–æ–∫—Å Show inactive –∏ –∫–Ω–æ–ø–∫–∞ Refresh
        with gr.Row():
            show_inactive = gr.Checkbox(label="Show inactive", value=True)
            refresh_button = gr.Button("Refresh")

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with gr.Row():
            selected_user_info = gr.Textbox(
                label="User Information", 
                interactive=False, 
                value="Use the search below to filter users.",
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        with gr.Row():
            block_button = gr.Button("Block")
            delete_button = gr.Button("Delete")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        with gr.Row():
            search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...")

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=[
                    "üë§ Username",
                    "üìß Email",
                    "üì± Telegram",
                    "üîó Allowed IPs",
                    "üìä Data Used",
                    "üì¶ Data Limit",
                    "‚ö° Status",
                    "üí≥ Plan",
                ],
                value=update_table(show_inactive=True),
                interactive=False,  # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                wrap=True
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        def refresh_table(show_inactive):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã."""
            return update_table(show_inactive)

        refresh_button.click(
            fn=refresh_table,
            inputs=[show_inactive],
            outputs=[stats_table]
        )

        # –ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        def search_and_update_table(query, show_inactive):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
            table = update_table(show_inactive)
            if query:
                table = [
                    row for row in table if query.lower() in " ".join(map(str, row)).lower()
                ]
            return table

        search_input.change(
            fn=search_and_update_table,
            inputs=[search_input, show_inactive],
            outputs=[stats_table]
        )

        # –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def show_user_info(selected_data):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
            if selected_data is None:
                return "Select a row from the table to view details."
            
            username = selected_data[0]  # –ü–µ—Ä–≤–æ–µ –ø–æ–ª–µ ‚Äî –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_records = load_user_records()
            user_info = user_records.get(username, {})
            return json.dumps(user_info, indent=4)

        stats_table.select(
            fn=show_user_info,
            inputs=[stats_table],
            outputs=[selected_user_info]
        )

