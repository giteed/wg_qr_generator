#!/usr/bin/env python3
# statistics_tab.py
# –ë–æ–ª–≤–∞–Ω–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "Statistics" Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ wg_qr_generator

import gradio as gr
import pandas as pd
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}

    with open(USER_DB_PATH, "r") as f:
        return json.load(f)


def prepare_table_data(show_inactive=True):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."""
    user_records = load_user_records()
    table_data = []

    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        table_data.append([
            user.get("username", "N/A"),
            user.get("data_used", "0.0 KiB"),
            user.get("data_limit", "100.0 GB"),
            user.get("status", "inactive"),
            user.get("subscription_price", "0.00 USD"),
            user.get("user_id", "N/A")
        ])

    return pd.DataFrame(table_data, columns=["User", "Used", "Limit", "Status", "Price", "UID"])


def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –±–æ–ª–≤–∞–Ω–∫—É –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    with gr.Tab("üîç Statistics"):
        gr.Markdown("""
        # –¢—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

        ## –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        # –¢—É—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏
        """)
