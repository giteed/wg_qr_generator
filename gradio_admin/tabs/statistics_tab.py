#!/usr/bin/env python3
# gradio_admin/tabs/statistics_tab.py

import gradio as gr
import pandas as pd
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}

    with open(USER_DB_PATH, "r") as f:
        return json.load(f)


def update_table(show_inactive=True):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Gradio."""
    user_records = load_user_records()
    table = []

    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        table.append([
            user.get("username", "N/A"),
            user.get("data_used", "0.0 KiB"),
            user.get("data_limit", "100.0 GB"),
            user.get("status", "inactive"),
            user.get("subscription_price", "0.00 USD"),
            user.get("user_id", "N/A")  # –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        ])

    return pd.DataFrame(
        table,
        columns=["üë§ User", "üìä Used", "üì¶ Limit", "‚ö° St.", "üí≥ $", "UID"]
    )


def statistics_tab():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    with gr.Tab("üîç Statistics"):
        with gr.Row():
            gr.Markdown("## User Statistics")

        # –ß–µ–∫–±–æ–∫—Å Show inactive –∏ –∫–Ω–æ–ø–∫–∞ Refresh
        with gr.Row():
            show_inactive = gr.Checkbox(label="Show inactive", value=True)
            refresh_button = gr.Button("Refresh")

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with gr.Row():
            selected_user_info = gr.Textbox(
                label="User Information",
                interactive=False,
                value="Use search or select a row from the table to view user details.",
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        with gr.Row():
            block_button = gr.Button("Block User")
            delete_button = gr.Button("Delete User")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        with gr.Row():
            search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...")

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=["üë§ User", "üìä Used", "üì¶ Limit", "‚ö° St.", "üí≥ $", "UID"],
                value=update_table(show_inactive=True),
                interactive=True,  # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è
            )

        # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        def refresh_table(show_inactive):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ–∫–±–æ–∫—Å–∞."""
            return update_table(show_inactive)

        refresh_button.click(
            fn=refresh_table,
            inputs=[show_inactive],
            outputs=[stats_table]
        )

        # –ü–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        def search_and_update_table(query, show_inactive):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ø–æ–∏—Å–∫–µ."""
            table = update_table(show_inactive)
            if query.strip():
                table = table[table.apply(
                    lambda row: query.lower() in row.to_string().lower(), axis=1
                )]
            return table

        search_input.change(
            fn=search_and_update_table,
            inputs=[search_input, show_inactive],
            outputs=[stats_table]
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏
        def show_user_info(dataframe):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
            if dataframe.empty:
                return "Use search or select a row from the table to view user details."

            try:
                # UID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—Ç–æ–ª–±—Ü–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                user_id = dataframe.iloc[0, -1]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü (UID)

                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
                print(f"Selected User ID: {user_id}")

                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_records = load_user_records()
                user_info = next(
                    (info for info in user_records.values() if info.get("user_id") == user_id),
                    None
                )

                if not user_info:
                    return f"No detailed information found for UID: {user_id}"

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
                user_details = json.dumps(user_info, indent=4, ensure_ascii=False)
                return user_details
            except Exception as e:
                return f"Error processing user information: {str(e)}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `select` –≤–º–µ—Å—Ç–æ `change`
        stats_table.select(
            fn=show_user_info,
            inputs=[stats_table],
            outputs=[selected_user_info]
        )
