#!/usr/bin/env python3
# gradio_admin/tabs/statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import gradio as gr
import pandas as pd
from gradio_admin.functions.table_helpers import update_table
from gradio_admin.functions.format_helpers import format_user_info
from gradio_admin.functions.user_records import load_user_records
from modules.data_sync import sync_user_data  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

def statistics_tab():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    with gr.Tab("üîç Statistics"):
        with gr.Row():
            gr.Markdown("## WireGuard Statistics")

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫–∞ Refresh
        with gr.Row():
            show_inactive = gr.Checkbox(label="Show inactive", value=True)
            refresh_button = gr.Button("Refresh")

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with gr.Row():
            selected_user_info = gr.Textbox(
                label="User Information",
                interactive=False,
                value="Use the search below for filtering.",
                elem_id="user-info-block"  # –î–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CSS
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        with gr.Row():
            block_button = gr.Button("Block User", elem_id="block-button")
            delete_button = gr.Button("Delete User", elem_id="delete-button")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        with gr.Row():
            search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...", interactive=True)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        with gr.Row():
            gr.Markdown(
                "Click a cell to view user details after the search.",
                elem_id="table-help-text",
                elem_classes=["small-text"]
            )

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with gr.Row():
            stats_table = gr.Dataframe(
                headers=["üë• User's Info", "üÜî Other Info"],
                value=update_table(True),
                interactive=False,  # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                wrap=True
            )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        def show_user_info(selected_data, query):
            """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
            print("[DEBUG] –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_user_info")  # –û—Ç–ª–∞–¥–∫–∞
            print(f"[DEBUG] Query: {query}")  # –û—Ç–ª–∞–¥–∫–∞

            if not query.strip():
                return "Please enter a query to filter user data, click a cell, and then perform actions."

            print(f"[DEBUG] Selected data: {selected_data}")  # –û—Ç–ª–∞–¥–∫–∞
            if selected_data is None or (isinstance(selected_data, pd.DataFrame) and selected_data.empty):
                return "Select a row from the table!"
            try:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
                if isinstance(selected_data, list):
                    row = selected_data
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ DataFrame
                elif isinstance(selected_data, pd.DataFrame):
                    row = selected_data.iloc[0].values
                else:
                    return "Unsupported data format!"

                print(f"[DEBUG] Extracted row: {row}")  # –û—Ç–ª–∞–¥–∫–∞

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                username = row[0].replace("üë§ User account : ", "") if len(row) > 0 else "N/A"
                records = load_user_records()
                user_data = records.get(username, {})

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                user_info = format_user_info(username, user_data, row)
                print(f"[DEBUG] User info:\n{user_info}")  # –û—Ç–ª–∞–¥–∫–∞
                return user_info.strip()
            except Exception as e:
                print(f"[DEBUG] Error in show_user_info: {e}")  # –û—Ç–ª–∞–¥–∫–∞
                return f"Error processing data: {str(e)}"

        stats_table.select(
            fn=show_user_info,
            inputs=[stats_table, search_input],
            outputs=[selected_user_info]
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "Refresh"
        def refresh_table(show_inactive):
            """
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
            """
            sync_user_data()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            return "", "Please enter a query to filter user data, click a cell, and then perform actions.", update_table(show_inactive)

        refresh_button.click(
            fn=refresh_table,
            inputs=[show_inactive],
            outputs=[search_input, selected_user_info, stats_table]
        )

        # –ü–æ–∏—Å–∫
        def search_and_update_table(query, show_inactive):
            """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
            table = update_table(show_inactive)
            if query:
                table = [
                    row for row in table if query.lower() in " ".join(map(str, row)).lower()
                ]
            return table

        search_input.change(
            fn=search_and_update_table,
            inputs=[search_input, show_inactive],
            outputs=[stats_table]
        )

        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def block_user_action(selected_data):
            """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            if not selected_data:
                return "Please select a user to block."
            # –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–æ–±–∞–≤–∏—Ç—å)
            return f"User {selected_data[0]} has been blocked."

        def delete_user_action(selected_data):
            """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            if not selected_data:
                return "Please select a user to delete."
            # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–¥–æ–±–∞–≤–∏—Ç—å)
            return f"User {selected_data[0]} has been deleted."

        block_button.click(
            fn=block_user_action,
            inputs=[stats_table],
            outputs=[selected_user_info]
        )

        delete_button.click(
            fn=delete_user_action,
            inputs=[stats_table],
            outputs=[selected_user_info]
        )
