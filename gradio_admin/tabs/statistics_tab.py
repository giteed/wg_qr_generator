#!/usr/bin/env python3
# statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import gradio as gr
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    if not os.path.exists(USER_DB_PATH):
        return {}
    with open(USER_DB_PATH, "r") as f:
        return json.load(f)


def filter_users(search_query, show_inactive):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞."""
    user_records = load_user_records()
    filtered_users = []
    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        if search_query.lower() in user.get("username", "").lower():
            filtered_users.append(user)
    return filtered_users


def user_container(user):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    with gr.Accordion(f"{user['username']} ({user['user_id']})", open=False):
        gr.Markdown(
            f"""
            **–°—Ç–∞—Ç—É—Å:** {user.get('status', 'N/A')}  
            **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:** {user.get('data_used', '0.0 KiB')} / {user.get('data_limit', '100.0 GB')}  
            **–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:** {user.get('subscription_plan', 'N/A')}  
            **–¶–µ–Ω–∞:** {user.get('subscription_price', '0.00 USD')}  
            **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {user.get('last_config_update', 'N/A')}
            """
        )
        with gr.Row():
            gr.Button("Block")
            gr.Button("Delete")
            gr.Button("Archive")


def create_user_list(search_query, show_inactive):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    users = filter_users(search_query, show_inactive)
    with gr.Column():
        if not users:
            gr.Markdown("### –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∏—Å–∫—É.")
        for user in users:
            user_container(user)


def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É 'Statistics'."""
    with gr.Tab("üîç Statistics"):
        gr.Markdown("## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ WireGuard")

        # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫: —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with gr.Row():
            show_inactive_checkbox = gr.Checkbox(label="Show inactive users", value=True)
            refresh_button = gr.Button("Refresh")

        # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        search_box = gr.Textbox(
            label="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...",
            interactive=True,
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = gr.Column()

        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        def update_user_list(search_query, show_inactive):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
            with user_list:
                user_list.clear()
                create_user_list(search_query, show_inactive)

        search_box.change(
            fn=update_user_list,
            inputs=[search_box, show_inactive_checkbox],
            outputs=[]
        )

        refresh_button.click(
            fn=lambda: update_user_list("", True),
            inputs=[],
            outputs=[]
        )

