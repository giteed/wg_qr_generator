#!/usr/bin/env python3
# statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ wg_qr_generator

import gradio as gr
import pandas as pd
import json
import os
from settings import USER_DB_PATH  # –ü—É—Ç—å –∫ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_user_records():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    print("[DEBUG] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON...")
    if not os.path.exists(USER_DB_PATH):
        print("[ERROR] –§–∞–π–ª JSON —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

    with open(USER_DB_PATH, "r") as f:
        data = json.load(f)
    print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    return data


def prepare_table_data(show_inactive=True):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã."""
    print(f"[DEBUG] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã. Show inactive: {show_inactive}")
    user_records = load_user_records()
    table_data = []

    for user in user_records.values():
        if not show_inactive and user.get("status") != "active":
            continue
        table_data.append({
            "Select": False,
            "User": user.get("username", "N/A"),
            "Used": user.get("data_used", "0.0 KiB"),
            "Limit": user.get("data_limit", "100.0 GB"),
            "Status": user.get("status", "inactive"),
            "Price": user.get("subscription_price", "0.00 USD"),
            "UID": user.get("user_id", "N/A")
        })

    print(f"[DEBUG] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(table_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã.")
    return pd.DataFrame(table_data)


def get_selected_user(dataframe):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {dataframe}")
    selected_rows = dataframe[dataframe["Select"] == True]
    if selected_rows.empty:
        print("[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return "No user selected"
    selected_user = selected_rows.iloc[0]
    print(f"[DEBUG] –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user['User']} (UID: {selected_user['UID']})")
    return selected_user["UID"]


def get_user_info(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å UID: {user_id}")
    if user_id == "No user selected" or not user_id:
        print("[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return "No user selected"
    user_records = load_user_records()
    for user in user_records.values():
        if user.get("user_id") == user_id:
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username')}")
            return json.dumps(user, indent=4)
    print("[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return "User not found."


def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    with gr.Tab("üîç Statistics"):
        gr.Markdown("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –§–∏–ª—å—Ç—Ä—ã
        with gr.Row():
            search_box = gr.Textbox(label="Search", placeholder="Search for users...")
            show_inactive_checkbox = gr.Checkbox(label="Show inactive users", value=True)
            refresh_button = gr.Button("Refresh Table")

        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        user_table = gr.Dataframe(
            value=prepare_table_data(),
            interactive=True,
            label="Users Table"
        )

        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        user_info_box = gr.Textbox(label="User Information", lines=10, interactive=False)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        with gr.Row():
            block_button = gr.Button("Block User")
            delete_button = gr.Button("Delete User")

        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        def filter_table(search_query, show_inactive):
            print(f"[DEBUG] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã. Query: '{search_query}', Show inactive: {show_inactive}")
            df = prepare_table_data(show_inactive)
            if search_query:
                df = df[df.apply(lambda row: search_query.lower() in str(row).lower(), axis=1)]
            print(f"[DEBUG] –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}.")
            return df

        refresh_button.click(lambda: prepare_table_data(), outputs=user_table)
        search_box.change(lambda q, show: filter_table(q, show), inputs=[search_box, show_inactive_checkbox], outputs=user_table)
        show_inactive_checkbox.change(lambda q, show: filter_table(q, show), inputs=[search_box, show_inactive_checkbox], outputs=user_table)
        user_table.change(get_selected_user, inputs=user_table, outputs=user_info_box)
        block_button.click(get_user_info, inputs=user_table, outputs=user_info_box)
        delete_button.click(get_user_info, inputs=user_table, outputs=user_info_box)
