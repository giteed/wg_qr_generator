        # –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def show_user_info(selected_data):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
            if selected_data is None or len(selected_data) == 0:
                return "Select a row from the table to view details."

            try:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ DataFrame
                if isinstance(selected_data, pd.DataFrame):
                    username = selected_data.iloc[0, 0]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
                elif isinstance(selected_data, list):
                    username = selected_data[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                else:
                    return "Unsupported data format selected."

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_records = load_user_records()
                user_info = user_records.get(username, {})
                if not user_info:
                    return f"No detailed information found for user: {username}"

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
                details = [
                    f"üë§ **Username**: {user_info.get('username', 'N/A')}",
                    f"üìß **Email**: {user_info.get('email', 'N/A')}",
                    f"üì± **Telegram**: {user_info.get('telegram_id', 'N/A')}",
                    f"üîó **Allowed IPs**: {user_info.get('allowed_ips', 'N/A')}",
                    f"üìä **Data Used**: {user_info.get('data_used', '0.0 KiB')}",
                    f"üì¶ **Data Limit**: {user_info.get('data_limit', '100.0 GB')}",
                    f"‚ö° **Status**: {user_info.get('status', 'inactive')}",
                    f"üí≥ **Subscription Plan**: {user_info.get('subscription_plan', 'free')}",
                    f"üõ†Ô∏è **Public Key**: {user_info.get('public_key', 'N/A')}",
                    f"üîë **Preshared Key**: {user_info.get('preshared_key', 'N/A')}",
                ]
                return "\n".join(details)
            except Exception as e:
                return f"Error processing user information: {str(e)}"
