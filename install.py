#!/usr/bin/env python3
# wg_qr_generator/install.py
# ===========================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WireGuard
# ===========================================
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
# - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard
# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ WireGuard
# - –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ main.py
# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator:
#   $ python3 install.py
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
# - –°–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ `settings.py`.
# - –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–∞–π–ª, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ `LOG_FILE_PATH`.
# ===========================================

import os
import shutil
import subprocess
import platform
import json
from pathlib import Path
from settings import (
    SERVER_CONFIG_FILE,
    PARAMS_FILE,
    WG_CONFIG_DIR,
    QR_CODE_DIR,
    LOG_FILE_PATH,
    LOG_LEVEL,
    WIREGUARD_PORT,
    DEFAULT_TRIAL_DAYS,
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    filename=LOG_FILE_PATH,
    level=getattr(logging, LOG_LEVEL, "INFO"),
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

def detect_package_manager():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    distro = platform.system()
    if distro == "Linux":
        with open("/etc/os-release", "r") as f:
            os_release = f.read()
            if "Ubuntu" in os_release:
                return "apt"
            elif "CentOS" in os_release or "Stream" in os_release:
                return "dnf"
    print("‚ùå Unsupported OS or distribution. Exiting.")
    logger.error("Unsupported OS or distribution.")
    exit(1)

def install_wireguard():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WireGuard."""
    package_manager = detect_package_manager()
    try:
        logger.info(f"Installing WireGuard using {package_manager}...")
        if package_manager == "apt":
            subprocess.run(["apt", "update"], check=True)
            subprocess.run(["apt", "install", "-y", "wireguard", "wireguard-tools"], check=True)
        elif package_manager == "dnf":
            subprocess.run(["dnf", "install", "-y", "epel-release"], check=True)
            subprocess.run(["dnf", "install", "-y", "wireguard-tools"], check=True)
        print("‚úÖ WireGuard installed successfully.")
        logger.info("WireGuard installed successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to install WireGuard: {e}")
        print("‚ùå Failed to install WireGuard. Check logs for details.")
        exit(1)

def collect_user_input():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("=== üõ†Ô∏è  WireGuard Installation ===")
    server_ip = input("Enter server IP [auto-detect]: ").strip() or "auto-detect"
    port = input(f"Enter WireGuard port [{WIREGUARD_PORT}]: ").strip() or WIREGUARD_PORT
    subnet = input("Enter subnet for clients [10.66.66.0/24]: ").strip() or "10.66.66.0/24"
    dns = input("Enter DNS servers [8.8.8.8, 8.8.4.4]: ").strip() or "8.8.8.8, 8.8.4.4"

    return {
        "server_ip": server_ip,
        "port": port,
        "subnet": subnet,
        "dns": dns,
    }

def configure_server(server_ip, port, subnet, dns):
    """–°–æ–∑–¥–∞—ë—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    try:
        logger.info("Configuring server...")
        if not SERVER_CONFIG_FILE.parent.exists():
            SERVER_CONFIG_FILE.parent.mkdir(parents=True)

        private_key = subprocess.check_output(["wg", "genkey"]).strip()
        public_key = subprocess.check_output(["echo", private_key, "|", "wg", "pubkey"]).strip()

        with open(SERVER_CONFIG_FILE, "w") as config:
            config.write(f"""
[Interface]
PrivateKey = {private_key.decode()}
Address = {subnet.split('/')[0]}
ListenPort = {port}
SaveConfig = true

PostUp = firewall-cmd --zone=public --add-interface=%i
PostUp = firewall-cmd --add-port={port}/udp
PostUp = firewall-cmd --add-rich-rule="rule family=ipv4 source address={subnet} masquerade"
PostDown = firewall-cmd --zone=public --remove-interface=%i
PostDown = firewall-cmd --remove-port={port}/udp
PostDown = firewall-cmd --remove-rich-rule="rule family=ipv4 source address={subnet} masquerade"
""")

        # Save parameters
        with open(PARAMS_FILE, "w") as params:
            params.write(f"""
SERVER_PUB_IP={server_ip}
SERVER_PORT={port}
SERVER_PUB_KEY={public_key.decode()}
SERVER_PRIV_KEY={private_key.decode()}
SERVER_SUBNET={subnet}
CLIENT_DNS={dns}
""")

        print("‚úÖ Server configured successfully.")
        logger.info("Server configuration saved.")
    except Exception as e:
        logger.error(f"Failed to configure server: {e}")
        print("‚ùå Failed to configure server. Check logs for details.")
        exit(1)

def setup_firewall(port, subnet):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–µ—Ä–≤–æ–ª."""
    try:
        logger.info("Configuring firewall...")
        subprocess.run(["firewall-cmd", "--zone=public", "--add-port", f"{port}/udp"], check=True)
        subprocess.run(["firewall-cmd", "--permanent", "--add-rich-rule", f"rule family=ipv4 source address={subnet} masquerade"], check=True)
        print("‚úÖ Firewall configured successfully.")
        logger.info("Firewall configured successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to configure firewall: {e}")
        print("‚ùå Failed to configure firewall. Check logs for details.")

def create_initial_user():
    """–°–æ–∑–¥–∞—ë—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ main.py."""
    try:
        logger.info("Creating initial user...")
        subprocess.run(["python3", "main.py", "SetupUser"], check=True)
        print("‚úÖ Initial user created successfully.")
        logger.info("Initial user created successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to create initial user: {e}")
        print("‚ùå Failed to create initial user. Check logs for details.")

def start_wireguard():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WireGuard."""
    try:
        subprocess.run(["systemctl", "start", "wg-quick@wg0"], check=True)
        print("‚úÖ WireGuard started successfully.")
        logger.info("WireGuard started successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to start WireGuard: {e}")
        print("‚ùå Failed to start WireGuard. Check logs for details.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    if shutil.which("wg"):
        print("‚ö†Ô∏è WireGuard is already installed. Do you want to reinstall it? (yes/no): ", end="")
        if input().strip().lower() != "yes":
            print("‚ùå Installation cancelled.")
            return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard
    install_wireguard()

    # –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params = collect_user_input()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    configure_server(**params)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞
    setup_firewall(params["port"], params["subnet"])

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_initial_user()

    # –ó–∞–ø—É—Å–∫ WireGuard
    start_wireguard()

    print("üéâ WireGuard installation complete!")

if __name__ == "__main__":
    main()
