#!/usr/bin/env python3
# modules/report_utils.py
# ===========================================
# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator
# ===========================================
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤,
# –≤–∫–ª—é—á–∞—è –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç, –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç, –æ–±–æ–±—â—ë–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
#
# –í–µ—Ä—Å–∏—è: 2.0
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-10

import os
import json
import subprocess
import platform
import psutil
import time
from datetime import datetime
from termcolor import colored
from modules.firewall_utils import get_external_ip
from settings import SUMMARY_REPORT_PATH, TEST_REPORT_PATH
from modules.test_report_generator import generate_report


def get_open_ports():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ firewalld."""
    try:
        output = subprocess.check_output(["sudo", "firewall-cmd", "--list-ports"], text=True)
        return output.strip() if output else colored("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ ‚ùå", "red")
    except subprocess.CalledProcessError:
        return colored("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚ùå", "red")


def get_wireguard_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å WireGuard."""
    try:
        output = subprocess.check_output(["systemctl", "is-active", "wg-quick@wg0"], text=True).strip()
        if output == "active":
            return colored("–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", "green")
        return colored("–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå", "red")
    except subprocess.CalledProcessError:
        return colored("–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå", "red")


def get_wireguard_peers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ WireGuard."""
    try:
        output = subprocess.check_output(["wg", "show"], text=True).splitlines()
        peers = [line.split(":")[1].strip() for line in output if line.startswith("peer:")]
        if peers:
            return f"{len(peers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ ‚úÖ"
        return colored("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ ‚ùå", "red")
    except FileNotFoundError:
        return colored("–ö–æ–º–∞–Ω–¥–∞ 'wg' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", "red")
    except subprocess.CalledProcessError:
        return colored("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚ùå", "red")


def get_users_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ user_records.json."""
    user_records_path = os.path.join("user", "data", "user_records.json")
    try:
        with open(user_records_path, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return colored("–§–∞–π–ª user_records.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå", "red")
    except json.JSONDecodeError:
        return colored("–§–∞–π–ª user_records.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚ùå", "red")


def get_gradio_status(port=7860):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Gradio."""
    try:
        for proc in psutil.process_iter(["pid", "name", "cmdline"]):
            cmdline = proc.info.get("cmdline", [])
            if cmdline and "gradio" in " ".join(cmdline) and str(port) in " ".join(cmdline):
                return f"–∑–∞–ø—É—â–µ–Ω (PID {proc.info['pid']}) ‚úÖ"
        return colored("–Ω–µ –∑–∞–ø—É—â–µ–Ω ‚ùå", "red")
    except Exception as e:
        return colored(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Gradio: {e} ‚ùå", "red")


def get_gradio_port_status(port=7860):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç Gradio."""
    open_ports = get_open_ports()
    if f"{port}/tcp" in open_ports:
        return colored("–æ—Ç–∫—Ä—ã—Ç ‚úÖ", "green")
    return colored("–∑–∞–∫—Ä—ã—Ç ‚ùå", "red")


def show_project_status():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===\n")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print(f" üñ•Ô∏è  –û–°: {platform.system()} {platform.release()}")
    print(f" üß∞  –Ø–¥—Ä–æ: {platform.uname().release}")
    print(f" üåç  –í–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å: {get_external_ip()}")

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–µ—Ä–≤–æ–ª–∞ –∏ –ø–æ—Ä—Ç—ã
    firewall_status = get_open_ports()
    print(f" üîì  –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {firewall_status}")

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ WireGuard
    wg_status = get_wireguard_status()
    wg_config_path = "/etc/wireguard/wg0.conf"
    wg_config_status = wg_config_path if os.path.exists(wg_config_path) else colored("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå", "red")
    wg_peers = get_wireguard_peers()
    print(f" üõ°Ô∏è  WireGuard —Å—Ç–∞—Ç—É—Å: {wg_status}")
    print(f" ‚öôÔ∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {wg_config_status}")
    print(f" üåê –ê–∫—Ç–∏–≤–Ω—ã–µ peers: {wg_peers}")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WireGuard
    users = get_users_data()
    if isinstance(users, dict):
        print("\n üë§  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WireGuard:")
        for user, details in users.items():
            status = details.get("status", "N/A")
            status_colored = colored(status, "green") if status == "active" else colored(status, "red")
            print(f"    - {user}: {details.get('allowed_ips', 'N/A')} | –°—Ç–∞—Ç—É—Å: {status_colored}")
    else:
        print(f" üë§  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")

    # Gradio
    gradio_status = get_gradio_status()
    gradio_port_status = get_gradio_port_status()
    print(f"\n üåê  Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {gradio_status}")
    print(f" üîå  –ü–æ—Ä—Ç Gradio: {gradio_port_status}")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç
    report_path = os.path.join("wg_qr_generator", "test_report.txt")
    if os.path.exists(report_path):
        print(f" üìã  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {report_path}")
    else:
        print(colored(" üìã  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå", "red"))

    print("\n===========================================\n")


def generate_project_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n  üìã  –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    try:
        generate_report()
    except Exception as e:
        print(f" ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")


def display_test_report():
    """–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if TEST_REPORT_PATH.exists():
        with open(TEST_REPORT_PATH, "r", encoding="utf-8") as file:
            print(file.read())
    else:
        print(f"  ‚ùå  –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_REPORT_PATH}")


def display_test_summary():
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    if TEST_REPORT_PATH.exists():
        with open(TEST_REPORT_PATH, "r", encoding="utf-8") as file:
            lines = file.readlines()
            summary_keys = [
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                "WireGuard —Å—Ç–∞—Ç—É—Å",
                "Gradio",
                "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã",
                "wg0.conf"
            ]
            print("\n=== –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===")
            for line in lines:
                if any(key in line for key in summary_keys):
                    print(line.strip())
            print("\n=========================================\n")
    else:
        print(f"  ‚ùå  –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_REPORT_PATH}")


def display_summary_report():
    """
    –ß–∏—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ settings.py.
    """
    try:
        if not SUMMARY_REPORT_PATH.exists():
            print(f" ‚ùå –§–∞–π–ª –û—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator –Ω–µ –Ω–∞–π–¥–µ–Ω:\n üìÇ  {SUMMARY_REPORT_PATH}")
            return

        with open(SUMMARY_REPORT_PATH, "r", encoding="utf-8") as file:
            content = file.read()

        print("\n=== üìã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator ===\n")
        print(content)

    except Exception as e:
        print(f" ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator: {e}")


if __name__ == "__main__":
    show_project_status()
    time.sleep(2)
    print("\n=== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ ===\n")
    display_summary_report()
