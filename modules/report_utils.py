#!/usr/bin/env python3
# modules/report_utils.py
# ===========================================
# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator
# ===========================================
# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤,
# –≤–∫–ª—é—á–∞—è –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç, –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
#
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# ---------------------
# from modules.report_utils import generate_project_report, display_test_report, display_summary_report
#
# generate_project_report()
# display_test_report()
# display_summary_report()
#
# –í–µ—Ä—Å–∏—è: 1.2
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02

from settings import SUMMARY_REPORT_PATH, TEST_REPORT_PATH
from modules.test_report_generator import generate_report


def generate_project_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n  üìã  –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    generate_report()


def display_test_report():
    """–í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if TEST_REPORT_PATH.exists():
        with open(TEST_REPORT_PATH, "r", encoding="utf-8") as file:
            print(file.read())
    else:
        print(f"  ‚ùå  –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_REPORT_PATH}")


def display_test_summary():
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    if TEST_REPORT_PATH.exists():
        with open(TEST_REPORT_PATH, "r", encoding="utf-8") as file:
            lines = file.readlines()
            summary_keys = [
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                "WireGuard —Å—Ç–∞—Ç—É—Å",
                "Gradio",
                "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã",
                "wg0.conf"
            ]
            print("\n=== –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===")
            for line in lines:
                if any(key in line for key in summary_keys):
                    print(line.strip())
            print("\n=========================================\n")
    else:
        print(f"  ‚ùå  –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {TEST_REPORT_PATH}")


def display_summary_report():
    """
    –ß–∏—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ settings.py.
    """
    try:
        if not SUMMARY_REPORT_PATH.exists():
            print(f" ‚ùå –§–∞–π–ª –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {SUMMARY_REPORT_PATH}")
            return

        with open(SUMMARY_REPORT_PATH, "r", encoding="utf-8") as file:
            content = file.read()

        #print("\n=== üìã –û–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===\n")
        print(content)

    except Exception as e:
        print(f" ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ ===\n")
    display_summary_report()
