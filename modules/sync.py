#!/usr/bin/env python3
# modules/sync.py
# –ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö WireGuard —Å –ø—Ä–æ–µ–∫—Ç–æ–º

import subprocess
import json
import os

USER_RECORDS_JSON = "user/data/user_records.json"

def load_json(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª."""
    if os.path.exists(filepath):
        try:
            with open(filepath, "r") as file:
                return json.load(file)
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
            return {}
    return {}

def save_json(filepath, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    with open(filepath, "w") as file:
        json.dump(data, file, indent=4)

def parse_wireguard_output(wg_output):
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã `wg show`."""
    lines = wg_output.splitlines()
    users = []
    current_peer = None

    for line in lines:
        if line.startswith("peer:"):
            current_peer = {"peer": line.split()[1]}
        elif current_peer and "allowed ips:" in line:
            current_peer["allowed_ips"] = line.split(":")[1].strip()
            users.append(current_peer)
            current_peer = None

    return users

def sync_wireguard_config(interface="wg0"):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard.
    """
    try:
        subprocess.run(["wg-quick", "save", interface], check=True)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard {interface} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard: {e}")

def sync_users_with_wireguard():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard —Å JSON-—Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ WireGuard...")
        wg_output = subprocess.check_output(["wg", "show"], text=True)
        wg_users = parse_wireguard_output(wg_output)

        if not wg_users:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–≤–æ–¥–µ WireGuard.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        existing_users = load_json(USER_RECORDS_JSON)

        updated = False
        for user in wg_users:
            peer = user.get("peer")
            if peer:
                if peer not in existing_users:
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {peer}")
                    existing_users[peer] = {
                        "peer": user["peer"],
                        "allowed_ips": user["allowed_ips"],
                        "status": "active"
                    }
                    updated = True
                elif existing_users[peer].get("allowed_ips") != user["allowed_ips"]:
                    print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {peer}: {user['allowed_ips']}")
                    existing_users[peer]["allowed_ips"] = user["allowed_ips"]
                    updated = True

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if updated:
            save_json(USER_RECORDS_JSON, existing_users)
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å WireGuard.")
        else:
            print("üîÑ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã WireGuard: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

if __name__ == "__main__":
    sync_users_with_wireguard()
