#!/usr/bin/env python3
# modules/debugger.py
# –ú–æ–¥—É–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.

import os
import sys
import json
import subprocess
from datetime import datetime
import threading
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EXCLUDE_DIRS = ['venv', '.pytest_cache', '.git', 'temp', '__pycache__']
MAX_VISIBLE_FILES = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ
TARGET_FUNCTIONS = [
    "create_user_tab",
    "delete_user_tab",
    "statistics_tab",
    "run_gradio_admin_interface",
    "sync_users_with_wireguard",
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
loading = False

def start_loader(message="Processing"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∞–¥–µ—Ä."""
    global loading
    loading = True
    spinner = ["üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî"]
    idx = 0
    while loading:
        print(f"\r{message} {spinner[idx % len(spinner)]}", end="", flush=True)
        idx += 1
        time.sleep(0.2)

def stop_loader():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–∞–¥–µ—Ä."""
    global loading
    loading = False
    print("\r", end="", flush=True)

def log(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(message)

def generate_project_structure_report(base_path, exclude_dirs, max_visible_files):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    report = ["=== Project Structure ==="]
    for root, dirs, files in os.walk(base_path):
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        relative_path = os.path.relpath(root, base_path)
        total_items = len(dirs) + len(files)

        if total_items > max_visible_files:
            report.append(f"üìÇ {relative_path} ‚îÄ {len(dirs)} folders, {len(files)} files")
        else:
            report.append(f"üìÇ {relative_path}")
            for d in dirs:
                report.append(f"  ‚îú‚îÄ‚îÄ üìÇ {d}")
            for f in files:
                report.append(f"  ‚îú‚îÄ‚îÄ üìÑ {f}")
    return "\n".join(report)

def debug_python_environment():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Python."""
    return f"""=== Python Environment ===
Python Executable: {sys.executable}
Python Version: {sys.version}
PYTHONPATH:
{sys.path}
"""

def debug_required_files_and_dirs(base_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    required_items = [
        "user/data/qrcodes",
        "user/data/wg_configs",
        "logs",
        "user/data/user_records.json",
        "logs/wg_users.json"
    ]
    report = ["=== Required Files/Dirs Check ==="]
    for item in required_items:
        path = os.path.join(base_path, item)
        if os.path.exists(path):
            report.append(f"‚úÖ Exists: {item}")
        else:
            report.append(f"‚ùå Missing: {item}")
            if "." not in os.path.basename(item):
                os.makedirs(path, exist_ok=True)
                report.append(f"‚úÖ Directory created: {item}")
            else:
                with open(path, 'w') as f:
                    json.dump({}, f)
                report.append(f"‚úÖ File created: {item}")
    return "\n".join(report)

def grep_functions_in_project(functions, base_path):
    """–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    function_occurrences = {}
    for function in functions:
        command = f"grep -r -n -E 'def {function}\\(' {base_path}"
        try:
            output = subprocess.check_output(command, shell=True, text=True, stderr=subprocess.DEVNULL)
            function_occurrences[function] = output.strip().splitlines()
        except subprocess.CalledProcessError:
            function_occurrences[function] = []
    return function_occurrences

def generate_function_search_report(function_occurrences):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö."""
    report = ["=== Function Search Report ==="]
    for function, occurrences in function_occurrences.items():
        if occurrences:
            report.append(f"‚úÖ {function} found in:")
            report.extend([f"  {line}" for line in occurrences])
        else:
            report.append(f"‚ùå {function} not found.")
    return "\n".join(report)

def run_diagnostics():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    base_path = os.path.abspath(os.path.join(__file__, "../../"))
    timestamp = datetime.now().isoformat()
    report_lines = [f"=== Diagnostic Report for wg_qr_generator ===", f"Timestamp: {timestamp}", ""]

    loader_thread = threading.Thread(target=start_loader, args=("Running diagnostics...",), daemon=True)
    loader_thread.start()

    try:
        report_lines.append(debug_python_environment())
        report_lines.append(generate_project_structure_report(base_path, EXCLUDE_DIRS, MAX_VISIBLE_FILES))
        report_lines.append(debug_required_files_and_dirs(base_path))
        function_occurrences = grep_functions_in_project(TARGET_FUNCTIONS, base_path)
        report_lines.append(generate_function_search_report(function_occurrences))
    finally:
        stop_loader()

    report_path = os.path.join(base_path, "modules", "debug_report.txt")
    with open(report_path, "w") as report_file:
        report_file.write("\n".join(report_lines))
    log(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")

if __name__ == "__main__":
    run_diagnostics()
