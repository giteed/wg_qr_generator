#!/usr/bin/env python3
# modules/project_status.py
# –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import os
import json
import subprocess
import platform
import psutil
from datetime import datetime


def get_external_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å."""
    try:
        return subprocess.check_output(["curl", "-s", "https://ipinfo.io/ip"], text=True).strip()
    except subprocess.CalledProcessError:
        return "N/A"


def get_open_ports():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ firewalld."""
    try:
        output = subprocess.check_output(["sudo", "firewall-cmd", "--list-ports"], text=True)
        return output.strip() if output else "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
    except subprocess.CalledProcessError:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


def get_wireguard_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å WireGuard."""
    try:
        output = subprocess.check_output(["systemctl", "is-active", "wg-quick@wg0"], text=True).strip()
        return "–∞–∫—Ç–∏–≤–µ–Ω" if output == "active" else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    except subprocess.CalledProcessError:
        return "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


def get_wireguard_peers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ WireGuard."""
    try:
        output = subprocess.check_output(["wg", "show"], text=True).splitlines()
        peers = [line.split(":")[1].strip() for line in output if line.startswith("peer:")]
        return peers if peers else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤"
    except subprocess.CalledProcessError:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


def get_users_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ user_records.json."""
    user_records_path = os.path.join("user", "data", "user_records.json")
    try:
        with open(user_records_path, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return "–§–∞–π–ª user_records.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."


def get_gradio_status(port=7860):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Gradio."""
    for proc in psutil.process_iter(["pid", "name", "cmdline"]):
        cmdline = proc.info.get("cmdline", [])
        if cmdline and "python" in proc.info["name"] and f"{port}" in " ".join(cmdline):
            return f"–∑–∞–ø—É—â–µ–Ω (PID {proc.info['pid']})"
    return "–Ω–µ –∑–∞–ø—É—â–µ–Ω"



def show_project_status():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===\n")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print(f" üñ•Ô∏è  –û–°: {platform.system()} {platform.release()}")
    print(f" üß∞  –Ø–¥—Ä–æ: {platform.uname().release}")
    print(f" üåç  –í–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å: {get_external_ip()}")
    print(f" üîì  –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {get_open_ports()}\n")

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ WireGuard
    print(f" üõ°Ô∏è  WireGuard —Å—Ç–∞—Ç—É—Å: {get_wireguard_status()}")
    print(f" ‚öôÔ∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {'/etc/wireguard/wg0.conf' if os.path.exists('/etc/wireguard/wg0.conf') else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f" üåê  –ê–∫—Ç–∏–≤–Ω—ã–µ peers: {get_wireguard_peers()}\n")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users = get_users_data()
    if isinstance(users, dict):
        print(" üë§  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WireGuard:")
        for user, details in users.items():
            print(f"    - {user}: {details.get('allowed_ips', 'N/A')} | –°—Ç–∞—Ç—É—Å: {details.get('status', 'N/A')}")
    else:
        print(f" üë§  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}\n")

    # Gradio
    print(f" üåê  Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {get_gradio_status()}")
    print(f" üîå  –ü–æ—Ä—Ç Gradio: {'7860 –æ—Ç–∫—Ä—ã—Ç' if '7860/tcp' in get_open_ports() else '–∑–∞–∫—Ä—ã—Ç'}\n")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    report_path = os.path.join("wg_qr_generator", "test_report.txt")
    if os.path.exists(report_path):
        print(f" üìã  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {report_path}")
    else:
        print(" üìã  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")

    print("=======================================\n")


if __name__ == "__main__":
    show_project_status()
