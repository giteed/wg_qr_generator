#!/usr/bin/env python3

import os
import sys
import time
import tracemalloc
from prettytable import PrettyTable

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ sys.path
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, ".."))
sys.path.append(PROJECT_ROOT)

try:
    from settings import BASE_DIR
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ settings.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    sys.exit(1)


def get_process_memory_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏.
    """
    project_path = str(BASE_DIR)
    processes = []
    try:
        output = os.popen(f"ps aux --sort=-%mem").readlines()
        for line in output[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            parts = line.split()
            if len(parts) < 11:
                continue
            pid = parts[1]
            memory = float(parts[3])  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            command = " ".join(parts[10:])
            if project_path in command:
                processes.append((pid, memory, command))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")
    return processes


def display_memory_usage(interval=5):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        while True:
            os.system("clear")
            processes = get_process_memory_info()

            if not processes:
                print(f"–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {BASE_DIR}")
                time.sleep(interval)
                continue

            # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
            table = PrettyTable(["PID", "Memory Usage (%)", "Command Line"])
            total_memory = 0.0
            for pid, memory, command in processes:
                table.add_row([pid, memory, command])
                total_memory += memory

            print(table)
            print(f"\n–ò—Ç–æ–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {total_memory:.2f}%")
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥...")
            time.sleep(interval)

    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


if __name__ == "__main__":
    print(f"üîç –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {BASE_DIR}")
    display_memory_usage()
