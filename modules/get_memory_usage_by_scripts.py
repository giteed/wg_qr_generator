import tracemalloc
import os
import sys
import time
import psutil
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
CURRENT_DIR = Path(__file__).resolve().parent
PROJECT_DIR = CURRENT_DIR.parent
sys.path.append(str(PROJECT_DIR))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    from settings import BASE_DIR
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ settings.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    sys.exit(1)

def get_memory_usage_by_scripts(project_dir):
    project_dir = os.path.abspath(project_dir)
    processes_info = []

    for proc in psutil.process_iter(attrs=['pid', 'name', 'cmdline', 'memory_info', 'cwd']):
        try:
            pid = proc.info['pid']
            name = proc.info['name']
            cmdline = proc.info['cmdline']
            cwd = proc.info.get('cwd')  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            memory_usage = proc.info['memory_info'].rss  # –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å –≤ –±–∞–π—Ç–∞—Ö

            if (
                cmdline and any(project_dir in arg for arg in cmdline)
                or (cwd and project_dir in cwd)
            ):
                processes_info.append({
                    'pid': pid,
                    'name': name,
                    'cmdline': ' '.join(cmdline),
                    'memory_usage': memory_usage,
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue

    return sorted(processes_info, key=lambda x: x['memory_usage'], reverse=True)


def display_memory_usage_with_functions(project_dir, interval=1):
    tracemalloc.start()
    try:
        while True:
            os.system('clear')
            processes = get_memory_usage_by_scripts(project_dir)

            if not processes:
                print(f"–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_dir}")
                time.sleep(interval)
                continue

            total_memory = sum(proc['memory_usage'] for proc in processes)

            print(f"{'ID':<10}{'Name':<20}{'Memory Usage (MB)':<20}{'Command Line':<50}")
            print("-" * 100)
            for proc in processes:
                print(f"{proc['pid']:<10}{proc['name']:<20}{proc['memory_usage'] / (1024 ** 2):<20.2f}{proc['cmdline']:<50}")
            print("-" * 100)
            print(f"{'–ò—Ç–æ–≥':<30}{total_memory / (1024 ** 2):<20.2f}{'MB':<50}")

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
            print("\nüîç –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:")
            snapshot = tracemalloc.take_snapshot()
            stats = snapshot.filter_traces((
                tracemalloc.Filter(True, str(BASE_DIR)),
            )).statistics('lineno')

            if stats:
                for stat in stats[:10]:
                    print(f"{stat.traceback.format()}: {stat.size / 1024:.2f} KB")
            else:
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º.")

            print(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥...")
            time.sleep(interval)
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        tracemalloc.stop()


if __name__ == "__main__":
    project_directory = str(BASE_DIR)
    print(f"üîç –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_directory}")
    display_memory_usage_with_functions(project_directory, interval=1)
