#!/usr/bin/env python3

"""
get_memory_usage_by_scripts.py
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
"""

import psutil
import os
import sys
import time
import tracemalloc
from memory_profiler import memory_usage
from pathlib import Path
from collections import Counter

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
CURRENT_DIR = Path(__file__).resolve().parent
PROJECT_DIR = CURRENT_DIR.parent
sys.path.append(str(PROJECT_DIR))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
try:
    from settings import BASE_DIR
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ settings.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    sys.exit(1)


def get_memory_usage_by_scripts(project_dir):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –æ–±—ä–µ–º—É –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–π –ø–∞–º—è—Ç–∏.

    :param project_dir: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    :return: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏.
    """
    project_dir = os.path.abspath(project_dir)
    processes_info = []

    for proc in psutil.process_iter(attrs=['pid', 'name', 'cmdline', 'memory_info', 'cwd']):
        try:
            pid = proc.info['pid']
            name = proc.info['name']
            cmdline = proc.info['cmdline']
            cwd = proc.info.get('cwd')  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            memory_usage = proc.info['memory_info'].rss  # –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å –≤ –±–∞–π—Ç–∞—Ö

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∫ –ø—Ä–æ–µ–∫—Ç—É
            if (
                cmdline and any(project_dir in arg for arg in cmdline)
                or (cwd and project_dir in cwd)
            ):
                processes_info.append({
                    'pid': pid,
                    'name': name,
                    'cmdline': ' '.join(cmdline),
                    'memory_usage': memory_usage,
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –æ–±—ä–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–∞–º—è—Ç–∏
    sorted_processes = sorted(processes_info, key=lambda x: x['memory_usage'], reverse=True)
    return sorted_processes


def analyze_memory_usage():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ø–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Python.
    """
    tracemalloc.start(25)
    snapshot = tracemalloc.take_snapshot()
    stats = snapshot.statistics('lineno')

    details = []
    for stat in stats[:10]:
        memory_kb = stat.size / 1024
        file_path = stat.traceback[0].filename
        line_no = stat.traceback[0].lineno
        details.append((memory_kb, file_path, line_no))

    tracemalloc.stop()
    return details


def get_loaded_modules_memory():
    """
    –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏.

    :return: –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏.
    """
    module_sizes = Counter()
    for module_name, module in sys.modules.items():
        try:
            size = sum(sys.getsizeof(obj) for obj in vars(module).values())
            module_sizes[module_name] += size
        except TypeError:
            continue
    return module_sizes.most_common(10)


def display_memory_usage_with_details(project_dir, interval=1):
    """
    –í —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã.

    :param project_dir: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    try:
        while True:
            os.system('clear')
            processes = get_memory_usage_by_scripts(project_dir)

            if not processes:
                print(f"–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {project_dir}")
                time.sleep(interval)
                continue

            total_memory = sum(proc['memory_usage'] for proc in processes)

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            print(f"{'ID':<10}{'Name':<20}{'Memory Usage (MB)':<20}{'Command Line':<50}")
            print("-" * 100)
            for proc in processes:
                print(f"{proc['pid']:<10}{proc['name']:<20}{proc['memory_usage'] / (1024 ** 2):<20.2f}{proc['cmdline']:<50}")
            print("-" * 100)
            print(f"{'–ò—Ç–æ–≥':<30}{total_memory / (1024 ** 2):<20.2f}{'MB':<50}")

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
            print("\nüîç –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:")
            details = analyze_memory_usage()
            if details:
                print(f"{'–†–∞–∑–º–µ—Ä (KB)':<15}{'–§–∞–π–ª':<50}{'–°—Ç—Ä–æ–∫–∞':<10}")
                print("-" * 80)
                for memory_kb, file_path, line_no in details:
                    print(f"{memory_kb:<15.2f}{file_path:<50}{line_no:<10}")
                total_function_memory = sum(d[0] for d in details)
                print(f"\n{'–ò—Ç–æ–≥ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º':<15}{total_function_memory:.2f} KB")
            else:
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º.")

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
            print("\nüîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:")
            modules = get_loaded_modules_memory()
            for module, size in modules:
                print(f"{module:<50} {size / 1024:.2f} KB")

            time.sleep(interval)
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º BASE_DIR –∏–∑ settings.py
    project_directory = str(BASE_DIR)
    print(f"üîç –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_directory}")
    display_memory_usage_with_details(project_directory, interval=1)
