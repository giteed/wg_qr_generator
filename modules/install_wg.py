#!/usr/bin/env python3
# modules/install_wg.py
# ===========================================
# –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ WireGuard —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º, –∫–ª—é—á–∞–º–∏ –∏ QR-–∫–æ–¥–∞–º–∏
# ===========================================

import os
import time
import subprocess
import traceback
from pathlib import Path
import shutil  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º shutil
import base64
from settings import (
    PRINT_SPEED,
    WG_CONFIG_DIR,
    QR_CODE_DIR,
    SERVER_CONFIG_FILE,
    LOG_FILE_PATH,
    LOG_LEVEL,
    DEFAULT_TRIAL_DAYS,
)
from modules.firewall_utils import get_external_ip
from ai_diagnostics.ai_diagnostics import display_message_slowly
import qrcode


def log_message(message: str, level: str = "INFO"):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if LOG_LEVEL == "DEBUG" or level != "DEBUG":
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - {level} - {message}\n"
        with open(LOG_FILE_PATH, "a") as log_file:
            log_file.write(log_entry)


def display_message(message, print_speed=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∏."""
    display_message_slowly(message, print_speed=print_speed)
    log_message(message)


def generate_keypair():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á–∏, —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã wg."""
    wg_path = shutil.which("wg")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ wg
    if not wg_path:
        error_message = "–ö–æ–º–∞–Ω–¥–∞ 'wg' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ WireGuard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        display_message(f"‚ùå {error_message}", print_speed=PRINT_SPEED)
        log_message(error_message, level="ERROR")
        raise FileNotFoundError("–ö–æ–º–∞–Ω–¥–∞ 'wg' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
    
    try:
        private_key = subprocess.check_output([wg_path, "genkey"]).decode().strip()
        public_key = subprocess.check_output([wg_path, "pubkey"], input=private_key.encode()).decode().strip()
        return private_key, public_key
    except subprocess.SubprocessError as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é 'wg': {e}"
        display_message(f"‚ùå {error_message}", print_speed=PRINT_SPEED)
        log_message(error_message, level="ERROR")
        raise



def create_directory(path: Path):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not path.exists():
        path.mkdir(parents=True, exist_ok=True)
        log_message(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}", level="DEBUG")


def generate_qr_code(config: str, file_path: Path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
    qr.add_data(config)
    qr.make(fit=True)
    img = qr.make_image(fill="black", back_color="white")
    img.save(file_path)
    log_message(f"QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")


def install_wireguard():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WireGuard —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π, –∫–ª—é—á–∞–º–∏ –∏ QR-–∫–æ–¥–∞–º–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        create_directory(WG_CONFIG_DIR)
        create_directory(QR_CODE_DIR)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        if SERVER_CONFIG_FILE.exists():
            display_message("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard.")
            overwrite = input("‚ö†Ô∏è   –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª? (yes/no): ").strip().lower()
            if overwrite != "yes":
                display_message("‚õî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í—ã—Ö–æ–¥.", print_speed=PRINT_SPEED)
                log_message("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard –æ—Ç–º–µ–Ω–µ–Ω–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", level="WARNING")
                return
            else:
                log_message(f"–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {SERVER_CONFIG_FILE}")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard
        display_message("üçÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard...", print_speed=PRINT_SPEED)
        time.sleep(1)
        log_message("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard –Ω–∞—á–∞–ª–∞—Å—å.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞
        server_private_key, server_public_key = generate_keypair()
        client_private_key, client_public_key = generate_keypair()
        preshared_key = base64.b64encode(os.urandom(32)).decode()

        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        external_ip = get_external_ip()
        display_message(f"üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω–µ—à–Ω–∏–π IP: {external_ip}", print_speed=PRINT_SPEED)

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        server_ip = input(f" üåç –í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞ [{external_ip}]: ").strip() or external_ip
        server_port = input(" üîí –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç WireGuard [51820]: ").strip() or "51820"
        subnet = input(" üì° –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Å–µ—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ [10.66.66.0/24]: ").strip() or "10.66.66.0/24"
        ipv6_subnet = "fd42:42:42::/64"
        dns_servers = input(" üßô‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ DNS —Å–µ—Ä–≤–µ—Ä–∞ [8.8.8.8, 8.8.4.4]: ").strip() or "8.8.8.8, 8.8.4.4"

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        server_config = f"""
[Interface]
Address = {subnet.split('/')[0]}/24,{ipv6_subnet.split('/')[0]}1/64
ListenPort = {server_port}
PrivateKey = {server_private_key}
PostUp = firewall-cmd --add-port {server_port}/udp && firewall-cmd --add-rich-rule='rule family=ipv4 source address={subnet} masquerade' && firewall-cmd --add-rich-rule='rule family=ipv6 source address={ipv6_subnet} masquerade'
PostDown = firewall-cmd --remove-port {server_port}/udp && firewall-cmd --remove-rich-rule='rule family=ipv4 source address={subnet} masquerade' && firewall-cmd --remove-rich-rule='rule family=ipv6 source address={ipv6_subnet} masquerade'

[Peer]
PublicKey = {client_public_key}
PresharedKey = {preshared_key}
AllowedIPs = {subnet.split('/')[0]}2/32,{ipv6_subnet.split('/')[0]}2/128
        """

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        with open(SERVER_CONFIG_FILE, "w") as config_file:
            config_file.write(server_config)
        log_message(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {SERVER_CONFIG_FILE}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        client_config = f"""
[Interface]
PrivateKey = {client_private_key}
Address = {subnet.split('/')[0]}2/32,{ipv6_subnet.split('/')[0]}2/128
DNS = {dns_servers}

[Peer]
PublicKey = {server_public_key}
PresharedKey = {preshared_key}
Endpoint = {server_ip}:{server_port}
AllowedIPs = 0.0.0.0/0,::/0
        """

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr_code_path = QR_CODE_DIR / "SetupUser_HphD.png"
        generate_qr_code(client_config, qr_code_path)

        # –û—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        report = f"""
=== –û—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard ===
üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞: {SERVER_CONFIG_FILE}
üîí –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: {server_port}
üì° –ü–æ–¥—Å–µ—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {subnet}
üåç –í–Ω–µ—à–Ω–∏–π IP: {server_ip}
üåê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ QR-–∫–æ–¥–µ: {qr_code_path}
üóÇÔ∏è –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {LOG_FILE_PATH}
        """
        display_message(report, print_speed=PRINT_SPEED)
        log_message("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard: {e}"
        display_message(error_message, print_speed=PRINT_SPEED)
        log_message(error_message, level="ERROR")
        log_message(traceback.format_exc(), level="ERROR")
