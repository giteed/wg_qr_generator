#!/usr/bin/env python3
# modules/test_report_generator.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator
# –í–µ—Ä—Å–∏—è: 2.0
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-28
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.

import os
import json
import subprocess
from datetime import datetime
from prettytable import PrettyTable

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
USER_RECORDS_JSON = os.path.join(BASE_DIR, "../user/data/user_records.json")
WG_USERS_JSON = os.path.join(BASE_DIR, "../logs/wg_users.json")
TEST_REPORT_PATH = os.path.join(BASE_DIR, "../test_report.txt")
WG_CONFIG = "/etc/wireguard/wg0.conf"
GRADIO_PORT = 7860


def load_json(filepath):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(filepath, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return f"‚ùå  –§–∞–π–ª {filepath} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    except json.JSONDecodeError:
        return f"‚ùå  –§–∞–π–ª {filepath} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."


def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥."""
    try:
        return subprocess.check_output(command, text=True).strip()
    except subprocess.CalledProcessError as e:
        return f"‚ùå  –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {' '.join(command)}: {e}"


def get_gradio_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Gradio."""
    try:
        output = subprocess.check_output(["ps", "-eo", "pid,cmd"], text=True)
        for line in output.splitlines():
            if "gradio" in line and str(GRADIO_PORT) in line:
                return f"üü¢  –∑–∞–ø—É—â–µ–Ω (—Å—Ç—Ä–æ–∫–∞: {line})"
        return "‚ùå  –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        return f"‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Gradio: {e}"


def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    timestamp = datetime.utcnow().isoformat()
    user_records = load_json(USER_RECORDS_JSON)
    wg_users = load_json(WG_USERS_JSON)

    report_lines = [f"=== üìù  –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ wg_qr_generator  ===", f"üìÖ  –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {timestamp}\n"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    report_lines.append("=== üìÇ  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞  ===")
    required_files = {
        "user_records.json": USER_RECORDS_JSON,
        "wg_users.json": WG_USERS_JSON,
        "wg0.conf": WG_CONFIG,
    }
    for name, path in required_files.items():
        report_lines.append(f"- {name}: {'üü¢  –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if os.path.exists(path) else '‚ùå  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    required_dirs = ["logs", "user/data", "user/data/qrcodes", "user/data/wg_configs"]
    for folder in required_dirs:
        report_lines.append(f"- {folder}: {'üü¢  –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(folder) else '‚ùå  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    # –î–∞–Ω–Ω—ã–µ –∏–∑ JSON
    report_lines.append("\n=== üìÑ  –î–∞–Ω–Ω—ã–µ –∏–∑ user_records.json  ===")
    if isinstance(user_records, dict):
        table = PrettyTable(["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "peer", "telegram_id"])
        for username, data in user_records.items():
            table.add_row([username, data.get('peer', 'N/A'), data.get('telegram_id', 'N/A')])
        report_lines.append(str(table))
    else:
        report_lines.append(f"{user_records}\n")

    report_lines.append("\n=== üìÑ  –î–∞–Ω–Ω—ã–µ –∏–∑ wg_users.json  ===")
    if isinstance(wg_users, dict):
        report_lines.append(json.dumps(wg_users, indent=4))
    else:
        report_lines.append(f"{wg_users}\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WireGuard
    report_lines.append("\n=== üîí  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã wg show  ===")
    wg_show_output = run_command(["wg", "show"])
    report_lines.append(wg_show_output if wg_show_output else "‚ùå  WireGuard –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞.\n")

    report_lines.append("\n=== üîß  –°–æ—Å—Ç–æ—è–Ω–∏–µ WireGuard  ===")
    wg_status_output = run_command(["systemctl", "status", "wg-quick@wg0"])
    report_lines.append(wg_status_output)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    report_lines.append("\n=== üîç  –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤  ===")
    firewall_ports = run_command(["sudo", "firewall-cmd", "--list-ports"])
    report_lines.append(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {firewall_ports}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Gradio
    report_lines.append("\n=== üåê  –°—Ç–∞—Ç—É—Å Gradio  ===")
    gradio_status = get_gradio_status()
    report_lines.append(f"Gradio: {gradio_status}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    report_lines.append("\n=== üñ•Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã  ===")
    try:
        ps_output = subprocess.check_output(["ps", "-eo", "pid,cmd"], text=True)
        report_lines.append(ps_output)
    except subprocess.CalledProcessError:
        report_lines.append("‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    with open(TEST_REPORT_PATH, "w") as report_file:
        report_file.write("\n".join(report_lines))
    
    print(f"‚úÖ  –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {TEST_REPORT_PATH}")


if __name__ == "__main__":
    generate_report()
