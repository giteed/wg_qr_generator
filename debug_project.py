#!/usr/bin/env python3
# debug_project.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.

import os
import sys
import json
import subprocess
from datetime import datetime
import threading
import time

EXCLUDE_DIRS = ['venv']  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ).
MAX_VISIBLE_FILES = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ

loading = False  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∞–¥–µ—Ä–æ–º

def start_loader(message="Processing"):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∞–¥–µ—Ä–∞."""
    global loading
    loading = True
    spinner = ["|", "/", "-", "\\"]
    idx = 0
    while loading:
        print(f"\r{message} {spinner[idx % len(spinner)]}", end="", flush=True)
        idx += 1
        time.sleep(0.2)

def stop_loader():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–∞–¥–µ—Ä –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É."""
    global loading
    loading = False
    print("\r", end="", flush=True)  # –£–¥–∞–ª—è–µ—Ç –ª–æ–∞–¥–µ—Ä —Å —ç–∫—Ä–∞–Ω–∞

def log(message):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(message)

def generate_project_structure_report(base_path, exclude_dirs, max_visible_files):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.
    :param base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.
    :param exclude_dirs: –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    :param max_visible_files: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :return: –û—Ç—á–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    report = ["=== Project Structure ==="]
    for root, dirs, files in os.walk(base_path):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        relative_path = os.path.relpath(root, base_path)
        report.append(f"üìÇ {relative_path}")
        total_items = len(dirs) + len(files)

        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤
        if total_items > max_visible_files:
            report.append(f"  ‚îú‚îÄ‚îÄ üìÇ Contains {len(dirs)} folders and {len(files)} files")
        else:
            for d in dirs:
                report.append(f"  ‚îú‚îÄ‚îÄ üìÇ {d}")
            for f in files:
                report.append(f"  ‚îú‚îÄ‚îÄ üìÑ {f}")
    return "\n".join(report)

def debug_python_environment():
    """–û—Ç—á–µ—Ç –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Python."""
    return f"""=== Python Environment ===
Python Executable: {sys.executable}
Python Version: {sys.version}
PYTHONPATH:
{sys.path}
"""

def debug_required_files_and_dirs(base_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    required_items = [
        "user/data/qrcodes",
        "user/data/wg_configs",
        "logs",
        "user/data/user_records.json",
        "logs/wg_users.json"
    ]
    report = ["=== Required Files/Dirs Check ==="]
    for item in required_items:
        path = os.path.join(base_path, item)
        if os.path.exists(path):
            report.append(f"‚úÖ Exists: {item}")
        else:
            report.append(f"‚ùå Missing: {item}")
            # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ —Ñ–∞–π–ª
            if "." not in os.path.basename(item):  # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                os.makedirs(path, exist_ok=True)
                report.append(f"‚úÖ Directory created: {item}")
            else:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª
                with open(path, 'w') as f:
                    json.dump({}, f)
                report.append(f"‚úÖ File created: {item}")
    return "\n".join(report)

def grep_functions_in_project(functions, base_path):
    """
    –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    :param functions: –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :param base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
    """
    function_occurrences = {}
    for function in functions:
        command = f"grep -r -n -E 'def {function}\\(' {base_path}"
        try:
            output = subprocess.check_output(command, shell=True, text=True, stderr=subprocess.DEVNULL)
            function_occurrences[function] = output.strip().splitlines()
        except subprocess.CalledProcessError:
            function_occurrences[function] = []
    return function_occurrences

def generate_function_search_report(function_occurrences):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö."""
    report = ["=== Function Search Report ==="]
    for function, occurrences in function_occurrences.items():
        if occurrences:
            report.append(f"‚úÖ {function} found in:")
            report.extend([f"  {line}" for line in occurrences])
        else:
            report.append(f"‚ùå {function} not found.")
    return "\n".join(report)

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    base_path = os.path.dirname(os.path.abspath(__file__))
    timestamp = datetime.now().isoformat()
    report_lines = [f"=== Diagnostic Report for wg_qr_generator ===", f"Timestamp: {timestamp}", ""]

    # –õ–æ–∞–¥–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loader_thread = threading.Thread(target=start_loader, args=("Running diagnostics...",), daemon=True)
    loader_thread.start()

    try:
        # –û—Ç—á–µ—Ç –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Python
        report_lines.append(debug_python_environment())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        report_lines.append(generate_project_structure_report(base_path, EXCLUDE_DIRS, MAX_VISIBLE_FILES))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        report_lines.append(debug_required_files_and_dirs(base_path))

        # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
        TARGET_FUNCTIONS = [
            "create_user_tab",
            "delete_user_tab",
            "statistics_tab",
            "run_gradio_admin_interface",
            "sync_users_with_wireguard",
        ]
        function_occurrences = grep_functions_in_project(TARGET_FUNCTIONS, base_path)
        report_lines.append(generate_function_search_report(function_occurrences))

    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∞–¥–µ—Ä
        stop_loader()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_path = os.path.join(base_path, "debug_report.txt")
    with open(report_path, "w") as report_file:
        report_file.write("\n".join(report_lines))
    
    log(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")

if __name__ == "__main__":
    main()
