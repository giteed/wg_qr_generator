#!/usr/bin/env python3
# ai_diagnostics/ai_help/ai_help.py
# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 2.6
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-04

import json
import sys
from pathlib import Path
from importlib.util import spec_from_file_location, module_from_spec

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
SETTINGS_FILE = PROJECT_ROOT / "settings.py"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
MODULES_DIR = PROJECT_ROOT / "modules"
HELP_DIR = PROJECT_ROOT / "ai_diagnostics" / "ai_help"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ `sys.path` –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(PROJECT_ROOT))
sys.path.append(str(MODULES_DIR))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.py."""
    settings = {}
    if SETTINGS_FILE.exists():
        spec = spec_from_file_location("settings", SETTINGS_FILE)
        settings_module = module_from_spec(spec)
        spec.loader.exec_module(settings_module)
        settings = {key: getattr(settings_module, key) for key in dir(settings_module) if not key.startswith("__")}
    return settings

SETTINGS = load_settings()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    from modules.input_utils import input_with_history
    from ai_diagnostics.ai_diagnostics import display_message_slowly
except ModuleNotFoundError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º.")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
LINE_WIDTH = {
    "menu": 60,
    "details": 70
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
def wrap_text(text, width, indent=4):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º."""
    words = text.split()
    lines = []
    current_line = ""

    for word in words:
        if len(current_line) + len(word) + 1 > width:
            lines.append(" " * indent + current_line)
            current_line = word
        else:
            current_line += ("" if current_line == "" else " ") + word

    if current_line:
        lines.append(" " * indent + current_line)

    return "\n".join(lines)

def preserve_json_formatting(text, indent=4):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏–∑ JSON."""
    lines = []
    for line in text.split("\n"):
        if line.strip():
            lines.append(" " * indent + line)
        else:
            lines.append("")
    return "\n".join(lines)

def replace_variables(text):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ {VARIABLE} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ SETTINGS."""
    for key, value in SETTINGS.items():
        text = text.replace(f"{{{key}}}", str(value))
    return text

def load_help_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ HELP_DIR."""
    help_data = {}
    for json_file in HELP_DIR.rglob("*.json"):
        try:
            with open(json_file, "r", encoding="utf-8") as file:
                data = json.load(file)
                help_data.update(data)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {json_file}: {e}")
    return help_data

def display_help_menu(help_data):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ======================")
    for idx, section in enumerate(help_data.values(), start=1):
        print(f"   {idx}. {section['title']}")
        print(wrap_text(section['short'], LINE_WIDTH["menu"], indent=6) + "\n")
    print("   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏\n")

def display_detailed_help(section):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    print(f"\n   {section['title']}\n")
    print(f"   {'=' * len(section['title'])}\n")
    formatted_text = replace_variables(section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
    formatted_text = preserve_json_formatting(formatted_text)
    display_message_slowly(formatted_text)

def interactive_help():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    help_data = load_help_files()
    if not help_data:
        print("   ‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    while True:
        display_help_menu(help_data)
        user_input = input("   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input in {"0", "q", "exit"}:
            print("\n   üìñ –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.")
            break

        if user_input.isdigit():
            index = int(user_input)
            if 1 <= index <= len(help_data):
                section = list(help_data.values())[index - 1]
                display_detailed_help(section)
        else:
            matches = [s for s in help_data.values() if user_input in s['title'].lower()]
            if matches:
                if len(matches) == 1:
                    display_detailed_help(matches[0])
                else:
                    print("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

if __name__ == "__main__":
    interactive_help()
