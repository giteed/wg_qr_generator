#!/usr/bin/env python3
# ai_diagnostics/ai_help/ai_help.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 1.0
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29

import json
import time
from pathlib import Path
from settings import HELP_JSON_PATH
from ai_diagnostics.modules.pause_rules import apply_pause, get_pause_rules
from ai_diagnostics.ai_diagnostics import display_message_slowly


def load_help_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(HELP_JSON_PATH, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None


def display_help_menu(help_data):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ======================")
    for idx, key in enumerate(help_data, start=1):
        section = help_data[key]
        print(f"   {idx}. {section['title']}")
        print(f"      {section['short']}\n")
    print("   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏")


def display_detailed_help(section):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–µ."""
    print(f"\n   {section['title']}\n   {'=' * (len(section['title']) + 3)}")
    display_message_slowly(section["long"])


def search_help(query, help_data):
    """–ò—â–µ—Ç —Ä–∞–∑–¥–µ–ª—ã —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
    query = query.lower()
    results = []
    for key, section in help_data.items():
        if query in section["title"].lower() or query in section["short"].lower() or query in section["long"].lower():
            results.append(section)
    return results


def handle_numeric_selection(selection, help_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä—É."""
    try:
        selection = int(selection)
        keys = list(help_data.keys())
        if selection == 0:
            print("\n   üìñ  –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n")
            return None
        elif 1 <= selection <= len(keys):
            section = help_data[keys[selection - 1]]
            display_detailed_help(section)
        else:
            print("\n   ‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        print("\n   ‚ùå  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞.")
    return True


def interactive_help():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    help_data = load_help_data()
    if help_data is None:
        print("\n   ‚ùå  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n")
        return
    
    while True:
        display_help_menu(help_data)
        user_input = input("\n   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()
        if user_input in {"q", "exit"}:
            print("\n   üìñ  –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n")
            break
        elif user_input.isdigit():
            if handle_numeric_selection(user_input, help_data) is None:
                break
        else:
            matched_sections = search_help(user_input, help_data)
            if matched_sections:
                display_detailed_help(matched_sections[0])
            else:
                print("\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n")


if __name__ == "__main__":
    interactive_help()
