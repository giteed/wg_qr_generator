#!/usr/bin/env python3
# ai_diagnostics/ai_help/ai_help.py
# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 2.2
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º–æ–¥—É–ª—è–º
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
MODULES_DIR = PROJECT_ROOT / "ai_diagnostics" / "modules"
HELP_DIR = PROJECT_ROOT / "ai_diagnostics" / "ai_help"
SETTINGS_PATH = PROJECT_ROOT / "settings.py"

sys.path.append(str(PROJECT_ROOT))
sys.path.append(str(MODULES_DIR))

# –ò–º–ø–æ—Ä—Ç—ã
from pause_rules import apply_pause, get_pause_rules
from ai_diagnostics.ai_diagnostics import display_message_slowly

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
LINE_WIDTH = {
    "menu": 60,
    "details": 70
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ settings.py
try:
    settings = {}
    with open(SETTINGS_PATH, "r", encoding="utf-8") as f:
        exec(f.read(), settings)
except FileNotFoundError:
    settings = {"PROJECT_DIR": str(PROJECT_ROOT)}

def replace_variables(text, variables):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞ {VAR} –≤ —Ç–µ–∫—Å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è variables.
    """
    for key, value in variables.items():
        text = text.replace(f"{{{key}}}", value)
    return text

def wrap_text_preserve_formatting(text, width, indent=4):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —è–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (\n).
    """
    lines = []
    for paragraph in text.split("\n"):
        if not paragraph.strip():
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
            continue

        words = paragraph.split()
        current_line = ""

        for word in words:
            if len(current_line) + len(word) + 1 > width:
                lines.append(" " * indent + current_line.strip())
                current_line = word
            else:
                current_line += ("" if current_line == "" else " ") + word

        if current_line:
            lines.append(" " * indent + current_line.strip())

    return "\n".join(lines)

def load_help_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ HELP_DIR."""
    help_data = {}
    for json_file in HELP_DIR.rglob("*.json"):
        try:
            with open(json_file, "r", encoding="utf-8") as file:
                data = json.load(file)
                for key, section in data.items():
                    if "title" not in section or "short" not in section or "long" not in section:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{key}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π ('title', 'short', 'long').")
                help_data.update(data)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {json_file}: {e}")
    return help_data

def save_help_section(section):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª."""
    filename = f"{section['title'].strip()}.txt".replace(" ", "_")
    with open(filename, "w", encoding="utf-8") as file:
        file.write(f"{section['title']}\n")
        file.write("=" * len(section['title']) + "\n")
        file.write(wrap_text_preserve_formatting(section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."),
                                                 LINE_WIDTH["details"]) + "\n")
    print(f"\n   üìÅ  –†–∞–∑–¥–µ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}\n")

def display_help_menu(help_data):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ======================")
    for idx, section in enumerate(help_data.values(), start=1):
        print(f"   {idx}. {section['title']}")
        print(wrap_text_preserve_formatting(section['short'], LINE_WIDTH["menu"], indent=6) + "\n")
    print("   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏\n")

def display_detailed_help(section):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    if 'long' not in section:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{section['title']}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'long'.")
    print(f"\n   {section['title']}")
    print(f"   {'=' * len(section['title'])}\n")
    text = replace_variables(section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."), settings)
    display_message_slowly(wrap_text_preserve_formatting(text, LINE_WIDTH["details"]))
    print("\n   üîπ –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª? ( –¥/–Ω ): ", end="")
    user_input = input().strip().lower()
    if user_input in {"–¥", "y"}:
        save_help_section(section)
    elif user_input in {"0", "q"}:
        print("\n   üìñ  –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

def interactive_help():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    help_data = load_help_files()
    if not help_data:
        print("   ‚ùå  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    while True:
        display_help_menu(help_data)
        user_input = input("   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input in {"0", "q", "exit"}:
            print("\n   üìñ  –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.")
            break

        if user_input.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º
            index = int(user_input)
            if 1 <= index <= len(help_data):  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞
                section = list(help_data.values())[index - 1]
                display_detailed_help(section)
                continue
        else:  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            matched_sections = [section for section in help_data.values()
                                if user_input in section['title'].lower() or
                                user_input in section['short'].lower() or
                                user_input in section.get('long', "").lower()]

            if len(matched_sections) == 1:
                display_detailed_help(matched_sections[0])
            elif len(matched_sections) > 1:
                print("\n   üîç  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for idx, section in enumerate(matched_sections, start=1):
                    print(f"   {idx}. {section['title']}")
                    print(wrap_text_preserve_formatting(section['short'], LINE_WIDTH["menu"], indent=6) + "\n")
                choice = input("\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ —É—Ç–æ—á–Ω—è—é—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
                if choice.isdigit() and 1 <= int(choice) <= len(matched_sections):
                    display_detailed_help(matched_sections[int(choice) - 1])
            else:
                print("\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n")

if __name__ == "__main__":
    interactive_help()
