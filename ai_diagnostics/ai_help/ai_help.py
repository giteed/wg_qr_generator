#!/usr/bin/env python3
# ai_diagnostics/ai_help/ai_help.py
# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 2.3
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29 16:45


import json
import sys
from pathlib import Path
from importlib.util import spec_from_file_location, module_from_spec

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º–æ–¥—É–ª—è–º
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
MODULES_DIR = PROJECT_ROOT / "ai_diagnostics" / "modules"
HELP_DIR = PROJECT_ROOT / "ai_diagnostics" / "ai_help"
SETTINGS_FILE = PROJECT_ROOT / "settings.py"

sys.path.append(str(PROJECT_ROOT))
sys.path.append(str(MODULES_DIR))

# –ò–º–ø–æ—Ä—Ç—ã
from pause_rules import apply_pause, get_pause_rules
from ai_diagnostics.ai_diagnostics import display_message_slowly

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
LINE_WIDTH = {
    "menu": 60,
    "details": 70
}


def wrap_text(text, width, indent=4):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º.
    """
    words = text.split()
    lines = []
    current_line = ""

    for word in words:
        if len(current_line) + len(word) + 1 > width:
            lines.append(" " * indent + current_line)
            current_line = word
        else:
            current_line += ("" if current_line == "" else " ") + word

    if current_line:
        lines.append(" " * indent + current_line)

    return "\n".join(lines)


def preserve_json_formatting(text, indent=4):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏–∑ JSON.
    """
    lines = []
    for line in text.split("\n"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        if line.strip():  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            lines.append(" " * indent + line)
        else:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
            lines.append("")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return "\n".join(lines)


def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.py."""
    settings = {}
    if SETTINGS_FILE.exists():
        spec = spec_from_file_location("settings", SETTINGS_FILE)
        settings_module = module_from_spec(spec)
        spec.loader.exec_module(settings_module)
        settings = {key: getattr(settings_module, key) for key in dir(settings_module) if not key.startswith("__")}
    return settings


SETTINGS = load_settings()


def replace_variables(text):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ {VARIABLE} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ SETTINGS."""
    for key, value in SETTINGS.items():
        text = text.replace(f"{{{key}}}", str(value))
    return text


def load_help_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ HELP_DIR."""
    help_data = {}
    for json_file in HELP_DIR.rglob("*.json"):
        try:
            with open(json_file, "r", encoding="utf-8") as file:
                data = json.load(file)
                for key, section in data.items():
                    if "title" not in section or ("short" not in section and "long" not in section):
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{key}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π ('title', 'short', 'long').")
                help_data.update(data)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {json_file}: {e}")
    return help_data


def save_help_section(section):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª."""
    filename = f"{section['title'].strip()}.txt".replace(" ", "_")
    with open(filename, "w", encoding="utf-8") as file:
        file.write(f"{section['title']}\n")
        file.write("=" * len(section['title']) + "\n")
        file.write(wrap_text(section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."), LINE_WIDTH["details"]) + "\n")
    print(f"\n   üìÅ  –†–∞–∑–¥–µ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}\n")


def display_help_menu(help_data):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    print("\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ======================")
    for idx, section in enumerate(help_data.values(), start=1):
        print(f"   {idx}. {section['title']}")
        print(wrap_text(section['short'], LINE_WIDTH["menu"], indent=6) + "\n")
    print("   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏\n")


def display_detailed_help(section):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    if 'long' not in section:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{section['title']}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'long'.")
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    print(f"\n   {section['title']}\n")
    print(f"   {'=' * (len(section['title'].strip()) + 4)}\n")

    # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatted_text = replace_variables(section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
    formatted_text = preserve_json_formatting(formatted_text)

    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    display_message_slowly(formatted_text)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    print("\n   üîπ –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª? ( –¥/–Ω ): ", end="")
    user_input = input().strip().lower()
    if user_input in {"–¥", "y"}:
        save_help_section(section)
    elif user_input in {"0", "q"}:
        print("\n   üìñ  –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


def search_in_matches(matches):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö."""
    while True:
        print("\n   üîç  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for idx, section in enumerate(matches, start=1):
            print(f"   {idx}. {section['title']}")
            print(wrap_text(section['short'], LINE_WIDTH["menu"], indent=6) + "\n")

        user_input = input("\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ —É—Ç–æ—á–Ω—è—é—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
            index = int(user_input)
            if 1 <= index <= len(matches):
                return matches[index - 1]
            else:
                print("\n   ‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            matches = [section for section in matches
                       if user_input in section['title'].lower() or
                       user_input in section['short'].lower() or
                       user_input in section.get('long', "").lower()]
            if len(matches) == 1:
                return matches[0]
            elif not matches:
                print("\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                break


def interactive_help():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    help_data = load_help_files()
    if not help_data:
        print("   ‚ùå  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    while True:
        display_help_menu(help_data)
        user_input = input("   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input in {"0", "q", "exit"}:
            print("\n   üìñ  –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.")
            break

        if user_input.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º
            index = int(user_input)
            if 1 <= index <= len(help_data):  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞
                section = list(help_data.values())[index - 1]
                display_detailed_help(section)
                continue
            else:
                print("\n   ‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
        else:  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            matched_sections = [section for section in help_data.values()
                                if user_input in section['title'].lower() or
                                user_input in section['short'].lower() or
                                user_input in section.get('long', "").lower()]

            if len(matched_sections) == 1:
                display_detailed_help(matched_sections[0])
            elif len(matched_sections) > 1:
                matches = search_in_matches(matched_sections)
                if matches:
                    display_detailed_help(matches)
            else:
                print("\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n")


if __name__ == "__main__":
    interactive_help()
