#!/usr/bin/env python3
# ai_diagnostics/ai_help/ai_help.py
# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 2.2
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º–æ–¥—É–ª—è–º
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
MODULES_DIR = PROJECT_ROOT / "ai_diagnostics" / "modules"
HELP_DIR = PROJECT_ROOT / "ai_diagnostics" / "ai_help"

sys.path.append(str(PROJECT_ROOT))
sys.path.append(str(MODULES_DIR))

# –ò–º–ø–æ—Ä—Ç—ã
from pause_rules import apply_pause, get_pause_rules
from ai_diagnostics.ai_diagnostics import display_message_slowly

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
LINE_WIDTH = {
    "menu": 60,
    "details": 70
}

def wrap_text(text, width, indent=4):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —à–∏—Ä–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ JSON.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
        width (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏.
        indent (int): –û—Ç—Å—Ç—É–ø –≤ –ø—Ä–æ–±–µ–ª–∞—Ö.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    lines = []
    current_line = ""
    indent_str = " " * indent

    for line in text.split("\n"):
        words = line.split()
        for word in words:
            if len(current_line) + len(word) + 1 > width:
                lines.append(f"{indent_str}{current_line}")
                current_line = word
            else:
                current_line += ("" if current_line == "" else " ") + word
        if current_line:
            lines.append(f"{indent_str}{current_line}")
            current_line = ""

    return "\n".join(lines)

def load_help_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ HELP_DIR."""
    help_data = {}
    for json_file in HELP_DIR.rglob("*.json"):
        try:
            with open(json_file, "r", encoding="utf-8") as file:
                data = json.load(file)
                for key, section in data.items():
                    if "title" not in section or "short" not in section or "long" not in section:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{key}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π ('title', 'short', 'long').")
                help_data.update(data)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {json_file}: {e}")
    return help_data

def save_help_section(section):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª."""
    filename = f"{section['title'].strip()}.txt".replace(" ", "_")
    with open(filename, "w", encoding="utf-8") as file:
        file.write(f"{section['title']}\n")
        file.write(f"{'=' * len(section['title'])}\n")
        file.write(f"{wrap_text(section.get('long', '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'), LINE_WIDTH['details'])}\n")
    print(f"\n   üìÅ  –†–∞–∑–¥–µ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}\n")

def display_help_menu(help_data):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    print(f"\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print(f"   ======================")
    for idx, section in enumerate(help_data.values(), start=1):
        print(f"   {idx}. {section['title']}")
        print(f"{wrap_text(section['short'], LINE_WIDTH['menu'], indent=6)}\n")
    print(f"   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏\n")

def display_detailed_help(section):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    if 'long' not in section:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{section['title']}': –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'long'.")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
    print(f"\n   {section['title']}\n")
    print(f"   {'=' * (len(section['title'].strip()) + 4)}\n")  # –õ–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞—è \n –∏ —Å–ø–∏—Å–∫–∏
    formatted_text = section.get('long', "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    formatted_text = formatted_text.replace("\n", "\n\n")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
    formatted_text = formatted_text.replace('1Ô∏è‚É£', '  1Ô∏è‚É£').replace('2Ô∏è‚É£', '  2Ô∏è‚É£').replace('üí°', '  üí°')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á—ë—Ç–æ–º —à–∏—Ä–∏–Ω—ã –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    formatted_text = wrap_text(formatted_text, LINE_WIDTH["details"], indent=6)
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º
    display_message_slowly(formatted_text)
    
    print("\n   üîπ –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª? ( –¥/–Ω ): ", end="")
    user_input = input().strip().lower()
    if user_input in {"–¥", "y"}:
        save_help_section(section)
    elif user_input in {"0", "q"}:
        print("\n   üìñ  –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


def search_in_matches(matches):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö."""
    while True:
        print(f"\n   üîç  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for idx, section in enumerate(matches, start=1):
            print(f"   {idx}. {section['title']}")
            print(f"{wrap_text(section['short'], LINE_WIDTH['menu'], indent=6)}\n")

        user_input = input(f"\n   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ —É—Ç–æ—á–Ω—è—é—â–µ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input.isdigit():
            index = int(user_input)
            if 1 <= index <= len(matches):
                return matches[index - 1]
            else:
                print(f"\n   ‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            matches = [section for section in matches
                       if user_input in section['title'].lower() or
                       user_input in section['short'].lower() or
                       user_input in section.get('long', "").lower()]
            if len(matches) == 1:
                return matches[0]
            elif not matches:
                print(f"\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                break

def interactive_help():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    help_data = load_help_files()
    if not help_data:
        print(f"   ‚ùå  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    while True:
        display_help_menu(help_data)
        user_input = input(f"   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if user_input in {"0", "q", "exit"}:
            print(f"\n   üìñ  –í—ã—Ö–æ–¥ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.")
            break

        if user_input.isdigit():
            index = int(user_input)
            if 1 <= index <= len(help_data):
                section = list(help_data.values())[index - 1]
                display_detailed_help(section)
                continue

        matched_sections = [section for section in help_data.values()
                            if user_input in section['title'].lower() or
                            user_input in section['short'].lower() or
                            user_input in section.get('long', "").lower()]

        if len(matched_sections) == 1:
            display_detailed_help(matched_sections[0])
        elif len(matched_sections) > 1:
            matches = search_in_matches(matched_sections)
            if matches:
                display_detailed_help(matches)
        else:
            print(f"\n   ‚ùå  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.\n")

if __name__ == "__main__":
    interactive_help()
