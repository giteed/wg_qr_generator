#!/usr/bin/env python3
# ai_help/ai_help.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 1.0
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29

import json
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(PROJECT_ROOT))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from settings import HELP_JSON_PATH
from ai_diagnostics.modules.pause_rules import apply_pause, get_pause_rules

def display_message_slowly(message):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ò–ò."""
    rules = get_pause_rules()  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—É–∑
    for line in message.split("\n"):
        if not line.strip():  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            print("   ")
            apply_pause("\n", rules)
            continue

        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            apply_pause(char, rules)
        print()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        time.sleep(0.05)


def load_help_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(HELP_JSON_PATH, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return {}


def display_help_menu(help_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–ø—Ä–∞–≤–∫–∏."""
    print("\n   üìñ  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ======================")
    for idx, (key, section) in enumerate(help_data.items(), start=1):
        print(f"   {idx}. {section['title']}")
        print(f"      {section['short']}\n")
    print("   0. –í—ã–π—Ç–∏ –∏–∑ —Å–ø—Ä–∞–≤–∫–∏\n")


def display_detailed_help(section):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª—É —Å–ø—Ä–∞–≤–∫–∏."""
    display_message_slowly(f"\n{section['title']}\n{'=' * (len(section['title']) + 2)}")
    display_message_slowly(section["detailed"])


def interactive_help():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    help_data = load_help_data()
    if not help_data:
        print("   ‚ùå  –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    while True:
        display_help_menu(help_data)
        choice = input("   –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()

        if choice == "0" or choice in {"–≤—ã—Ö–æ–¥", "exit"}:
            print("   üëã  –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        matched_sections = [
            section for section in help_data.values()
            if choice in section["id"] or choice in section["title"].lower()
        ]

        if len(matched_sections) == 1:
            display_detailed_help(matched_sections[0])
        elif len(matched_sections) > 1:
            print("   üîé  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
            for section in matched_sections:
                print(f"   - {section['title']}")
        else:
            print("   ‚ùì  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")


if __name__ == "__main__":
    interactive_help()
