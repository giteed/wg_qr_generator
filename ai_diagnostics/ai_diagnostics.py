#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 5.2
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02 21:23

import json
import time
import sys
import subprocess
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
MODULES_DIR = PROJECT_ROOT / "modules"
DIAGNOSTICS_DIR = PROJECT_ROOT / "ai_diagnostics"

sys.path.append(str(PROJECT_ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(MODULES_DIR))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import (
    DEBUG_REPORT_PATH,
    TEST_REPORT_PATH,
    MESSAGES_DB_PATH,
    PROJECT_DIR,
    LOG_LEVEL,
    LOG_FILE_PATH,
    ANIMATION_SPEED,
    PRINT_SPEED,
    LINE_DELAY,
    GRADIO_PORT,
    USER_DB_PATH,
    QR_CODE_DIR,
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å–µ—Ç–∏ WireGuard
from utils import get_wireguard_subnet

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º logging
logging.basicConfig(
    level=logging.getLevelName(LOG_LEVEL),  # –ü—Ä–∏–≤–æ–¥–∏–º LOG_LEVEL –∏–∑ settings –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE_PATH, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)
logger = logging.getLogger(__name__)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–æ—Ä—Ç—ã
WIREGUARD_PORT = 51820
REQUIRED_PORTS = [f"{WIREGUARD_PORT}/udp", f"{GRADIO_PORT}/tcp"]

# –°–∫—Ä–∏–ø—Ç—ã
SUMMARY_SCRIPT = DIAGNOSTICS_DIR / "ai_diagnostics_summary.py"

def execute_commands(commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    results = []
    for command in commands:
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è subprocess
            result = subprocess.run(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
            results.append(f"{command}:\n{result.stdout.strip()}")
        except subprocess.CalledProcessError as e:
            results.append(f"{command}:\n–û—à–∏–±–∫–∞: {e.stderr.strip()}")
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    return "\n".join(results)


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{' '.join(command)}': {e.stderr.strip()}")
        return None


def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ—Ä—Ç–æ–≤ —Å –≤—ã–≤–æ–¥–æ–º –æ—Ç–ª–∞–¥–∫–∏."""
    command = ["sudo", "firewall-cmd", "--list-all"]
    result = run_command(command)
    if not result:
        return []

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞:\n{result}")

    open_ports = []
    for line in result.splitlines():
        if "ports:" in line:
            try:
                ports_line = line.split("ports:")[1].strip()
                open_ports.extend(port.strip() for port in ports_line.split())
            except IndexError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ—Ä—Ç–æ–≤.")
                continue

    closed_ports = [port for port in REQUIRED_PORTS if port not in open_ports]
    return closed_ports


def check_masquerade_rules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞ –¥–ª—è WireGuard."""
    command = ["sudo", "firewall-cmd", "--list-all"]
    result = run_command(command)
    if not result:
        return ["–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞."]

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞:\n{result}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–µ—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard
        wireguard_subnet = get_wireguard_subnet()
        ipv4_network = wireguard_subnet.split("/")[0].rsplit(".", 1)[0] + ".0/24"  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "10.66.66.0/24"
        ipv6_rule = 'rule family="ipv6" source address="fd42:42:42::0/24" masquerade'
        required_rules = [
            f'rule family="ipv4" source address="{ipv4_network}" masquerade',
            ipv6_rule
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–¥—Å–µ—Ç–∏ WireGuard: {e}")
        return ["–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞."]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª
    missing_rules = []
    for rule in required_rules:
        if rule not in result:
            missing_rules.append(rule)

    logger.debug(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞: {missing_rules}")
    return missing_rules


def check_gradio_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Gradio –Ω–∞ –ø–æ—Ä—Ç—É."""
    command = ["ss", "-tuln"]
    result = run_command(command)
    if not result:
        return False

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ Gradio:\n{result}")

    for line in result.splitlines():
        if f":{GRADIO_PORT} " in line and "LISTEN" in line:
            return True
    return False


def parse_reports(messages_db_path):
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤. –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ messages_db.json.
    """
    try:
        with open(messages_db_path, "r", encoding="utf-8") as db_file:
            messages_db = json.load(db_file)
    except FileNotFoundError:
        logger.error(f" ‚ùå –§–∞–π–ª messages_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_db_path}")
        return [], []

    findings = []
    suggestions = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    closed_ports = check_ports()
    if closed_ports:
        report = messages_db.get("ports_closed", {})
        if report:
            report["message"] = report["message"].format(
                PROJECT_DIR=PROJECT_DIR,
                USER_DB_PATH=USER_DB_PATH,
                QR_CODE_DIR=QR_CODE_DIR
            )
            findings.append(report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞
    missing_masquerade_rules = check_masquerade_rules()
    if missing_masquerade_rules:
        report = messages_db.get("masquerade_issue", {})
        if report:
            report["message"] = report["message"].format(
                MISSING_RULES=", ".join(missing_masquerade_rules)
            )
            findings.append(report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Gradio
    if not check_gradio_status():
        report = messages_db.get("gradio_not_running", {})
        if report:
            report["message"] = report["message"].format(
                PROJECT_DIR=PROJECT_DIR
            )
            suggestions.append(report)

    return findings, suggestions



def display_message_slowly(message):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ò–ò."""
    for line in message.split("\n"):
        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            time.sleep(PRINT_SPEED)
        print()
        time.sleep(LINE_DELAY)


def handle_findings(findings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    for finding in findings:
        title = finding["title"]
        message = finding["message"]
        commands = finding.get("commands", [])

        #display_message_slowly(f"\n   {title}\n   {'=' * (len(title) + 2)}\n")
        display_message_slowly(message)

        if commands:
            display_message_slowly("\n üõ†  –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ")
            user_input = input().strip().lower()
            if user_input == "y":
                display_message_slowly(" ‚öôÔ∏è  –ò—Å–ø—Ä–∞–≤–ª—è—é...")
                results = execute_commands(commands)
                display_message_slowly(f"\n üìù  –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:\n{results}")


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
    display_message_slowly("\n üéØ  –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")

    findings, suggestions = parse_reports(MESSAGES_DB_PATH)

    if findings:
        handle_findings(findings)

    if suggestions:
        for suggestion in suggestions:
            display_message_slowly(f"\n {suggestion['title']}\n {suggestion['message']}")

    if not findings and not suggestions:
        display_message_slowly(" ‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!\n üëç  –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    print("\n")
    subprocess.run([sys.executable, str(SUMMARY_SCRIPT)])


if __name__ == "__main__":
    main()
