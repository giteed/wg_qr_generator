#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 4.5
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –≤ –≤—ã–≤–æ–¥–µ firewall-cmd.

import json
import time
import sys
import subprocess
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
MODULES_DIR = PROJECT_ROOT / "modules"
DIAGNOSTICS_DIR = PROJECT_ROOT / "ai_diagnostics"

sys.path.append(str(PROJECT_ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(MODULES_DIR))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import (
    DEBUG_REPORT_PATH,
    TEST_REPORT_PATH,
    MESSAGES_DB_PATH,
    PROJECT_DIR,
    LOG_LEVEL,
    LOG_FILE_PATH,
    ANIMATION_SPEED,
    PRINT_SPEED,
    LINE_DELAY,
    GRADIO_PORT,
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º logging
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE_PATH, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–æ—Ä—Ç—ã
WIREGUARD_PORT = 51820
REQUIRED_PORTS = [f"{WIREGUARD_PORT}/udp", f"{GRADIO_PORT}/tcp"]

# –°–∫—Ä–∏–ø—Ç—ã
DEBUGGER_SCRIPT = MODULES_DIR / "debugger.py"
TEST_REPORT_GENERATOR_SCRIPT = MODULES_DIR / "test_report_generator.py"
SUMMARY_SCRIPT = DIAGNOSTICS_DIR / "ai_diagnostics_summary.py"


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.stderr.strip()}"


def animate_message(message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è."""
    for _ in range(3):
        for dots in range(1, 4):
            print(f"\r   {message}{'.' * dots}{' ' * (3 - dots)}", end="", flush=True)
            time.sleep(ANIMATION_SPEED)
    print(f"\r   {message} üîé ", flush=True)


def display_message_slowly(message):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ò–ò."""
    for line in message.split("\n"):
        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            time.sleep(PRINT_SPEED)
        print()
        time.sleep(LINE_DELAY)


def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ—Ä—Ç–æ–≤ —Å –≤—ã–≤–æ–¥–æ–º –æ—Ç–ª–∞–¥–∫–∏."""
    command = ["sudo", "firewall-cmd", "--list-all"]
    result = run_command(command)
    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–µ—Ä–≤–æ–ª–∞:\n{result}")

    open_ports = []
    for line in result.splitlines():
        if "ports:" in line:
            logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Ä—Ç–æ–≤: {line.strip()}")
            ports_line = line.split("ports:")[1].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ 'ports:'
            open_ports = [port.strip() for port in ports_line.split()]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤

    logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}")
    logger.debug(f"–¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {REQUIRED_PORTS}")

    closed_ports = [port for port in REQUIRED_PORTS if port not in open_ports]
    return closed_ports


def execute_commands(commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    results = []
    for command in commands:
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
        result = run_command(command.split())
        results.append(f"{command}:\n{result}")
    time.sleep(3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    return "\n".join(results)


def parse_reports(debug_report_path, test_report_path, messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        with open(messages_db_path, "r", encoding="utf-8") as db_file:
            messages_db = json.load(db_file)
    except FileNotFoundError:
        logger.error(f" ‚ùå –§–∞–π–ª messages_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_db_path}")
        return [], []

    findings = []
    suggestions = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    closed_ports = check_ports()
    if closed_ports:
        findings.append(
            messages_db.get(
                "ports_closed",
                {"title": "üîí –ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã", "message": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã.", "commands": []},
            )
        )

    return findings, suggestions


def handle_findings(findings, paths):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    for finding in findings:
        title = finding["title"]
        message = format_message(finding["message"], paths)
        commands = finding.get("commands", [])

        display_message_slowly(f"\n   {title}\n   {'=' * (len(title) + 2)}\n")
        display_message_slowly(message)

        if commands:
            display_message_slowly("\n üõ†  –ù–∞–π–¥–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ")
            user_input = input().strip().lower()
            if user_input == "y":
                display_message_slowly(" ‚öôÔ∏è  –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—ã...")
                results = execute_commands(commands)
                display_message_slowly(f"\n üìù  –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:\n{results}")
                display_message_slowly(" üîÑ  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
                main()  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é


def format_message(message, paths):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç—è–º–∏."""
    for key, path in paths.items():
        message = message.replace(f"{{{key}}}", str(path))
    return message


def generate_summary_report():
    """–í—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    command = [sys.executable, str(SUMMARY_SCRIPT)]
    subprocess.run(command)


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
    animate_message(" üéâ  –ó–∞–≤–µ—Ä—à–∞—é –∞–Ω–∞–ª–∏–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ü§ñ")
    display_message_slowly("\n üéØ  –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")

    paths = {
        "DEBUG_REPORT_PATH": DEBUG_REPORT_PATH,
        "TEST_REPORT_PATH": TEST_REPORT_PATH,
        "PROJECT_DIR": PROJECT_DIR,
    }
    findings, _ = parse_reports(DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH)
    if findings:
        handle_findings(findings, paths)
    else:
        display_message_slowly(" ‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!\n üëç  –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    print("\n")
    generate_summary_report()


if __name__ == "__main__":
    main()
