#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º.

import json
import time
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.stderr.strip()}"


def generate_debug_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–±–∞–≥–≥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ debug_report.txt."""
    print("\n   ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (debug_report)...")
    print("   " + "=" * 40)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    command = [sys.executable, PROJECT_ROOT / "modules" / "debugger.py"]
    output = run_command(command)
    print(f"     ‚úÖ  –û—Ç—á—ë—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.\n     {output}")


def generate_test_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è test_report.txt."""
    print("\n   ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (test_report)...")
    print("   " + "=" * 40)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    command = [sys.executable, PROJECT_ROOT / "modules" / "test_report_generator.py"]
    output = run_command(command)
    print(f"     ‚úÖ  –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n     {output}")



def parse_reports(debug_report_path, test_report_path, messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    with open(messages_db_path, "r", encoding="utf-8") as db_file:
        messages_db = json.load(db_file)
    
    findings = []

    # –ê–Ω–∞–ª–∏–∑ debug_report
    with open(debug_report_path, "r", encoding="utf-8") as debug_file:
        debug_report = debug_file.read()
        if "firewall-cmd --add-port" in debug_report:
            findings.append(messages_db["firewall_issue"])
    
    # –ê–Ω–∞–ª–∏–∑ test_report
    with open(test_report_path, "r", encoding="utf-8") as test_file:
        test_report = test_file.read()
        if "Gradio: ‚ùå" in test_report:
            findings.append(messages_db["gradio_not_running"])
        if "Missing" in test_report:
            findings.append(messages_db["missing_files"])
    
    return findings


def get_paths_from_settings():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ –∏–∑ settings.py."""
    from settings import (
        BASE_DIR, PROJECT_DIR, WG_CONFIG_DIR, QR_CODE_DIR,
        USER_DB_PATH, DEBUG_REPORT_PATH, TEST_REPORT_PATH
    )
    return {
        "BASE_DIR": BASE_DIR,
        "PROJECT_DIR": PROJECT_DIR,
        "WG_CONFIG_DIR": WG_CONFIG_DIR,
        "QR_CODE_DIR": QR_CODE_DIR,
        "USER_DB_PATH": USER_DB_PATH,
        "DEBUG_REPORT_PATH": DEBUG_REPORT_PATH,
        "TEST_REPORT_PATH": TEST_REPORT_PATH
    }


def format_message(message, paths):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç—è–º–∏ –∏–∑ settings.py."""
    for key, path in paths.items():
        message = message.replace(f"{{{key}}}", str(path))
    return message


def display_message_slowly(title, message, paths):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    formatted_message = format_message(message, paths)
    print(f"\n   {title}\n   {' ' * 2}{'=' * len(title)}\n")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ "="
    for line in formatted_message.split("\n"):
        if not line.strip():
            print("   ")
            continue
        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            time.sleep(0.02)
        print()
        time.sleep(0.1)
    print("\n")



def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    generate_debug_report()
    generate_test_report()

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    paths = get_paths_from_settings()
    findings = parse_reports(DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH)
    if findings:
        print("\n üéâ  –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:\n")
        for finding in findings:
            display_message_slowly(finding["title"], finding["message"], paths)
    else:
        print("\n ‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n")


if __name__ == "__main__":
    main()
