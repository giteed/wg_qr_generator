import json
import time
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH

def parse_reports(debug_report_path, test_report_path, messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    with open(messages_db_path, "r", encoding="utf-8") as db_file:
        messages_db = json.load(db_file)
    
    findings = []

    # –ê–Ω–∞–ª–∏–∑ debug_report
    with open(debug_report_path, "r", encoding="utf-8") as debug_file:
        debug_report = debug_file.read()
        if "firewall-cmd --add-port" in debug_report:
            findings.append(messages_db["firewall_issue"])
    
    # –ê–Ω–∞–ª–∏–∑ test_report
    with open(test_report_path, "r", encoding="utf-8") as test_file:
        test_report = test_file.read()
        if "Gradio: ‚ùå" in test_report:
            findings.append(messages_db["gradio_not_running"])
        if "Missing" in test_report:
            findings.append(messages_db["missing_files"])
    
    return findings

def display_message_slowly(title, message):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤."""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã
    clean_title = title.strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–æ–±–µ–ª–æ–≤
    title_length = len(clean_title) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –Ω–∞ 1

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    print(f"\n  {clean_title}")  # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Ç—Å—Ç—É–ø–æ–º
    print(f"  {'=' * title_length}\n")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ 1 —Å–∏–º–≤–æ–ª –¥–ª–∏–Ω–Ω–µ–µ

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    for line in message.split("\n"):
        if not line.strip():  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            print("  ")  # –î–≤–∞ –ø—Ä–æ–±–µ–ª–∞ –æ—Ç—Å—Ç—É–ø–∞
            continue

        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
        print("  ", end="")  # –û—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π
        for word in line:
            print(word, end="", flush=True)
            time.sleep(0.02)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        print()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    findings = parse_reports(DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH)
    if findings:
        print("\nüéâ  –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")
        for finding in findings:
            display_message_slowly(finding["title"], finding["message"])
    else:
        print("\n‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n")

if __name__ == "__main__":
    main()
