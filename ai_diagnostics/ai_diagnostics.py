#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 3.9
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02
# –í–∫–ª—é—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ logging –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏.

import json
import time
import sys
import subprocess
import random
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
MODULES_DIR = PROJECT_ROOT / "modules"
DIAGNOSTICS_DIR = PROJECT_ROOT / "ai_diagnostics"

sys.path.append(str(PROJECT_ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(MODULES_DIR))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import (
    DEBUG_REPORT_PATH,
    TEST_REPORT_PATH,
    MESSAGES_DB_PATH,
    PROJECT_DIR,
    LOG_LEVEL,
    LOG_FILE_PATH,
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º logging
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE_PATH, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)
logger = logging.getLogger(__name__)

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
DEBUGGER_SCRIPT = MODULES_DIR / "debugger.py"
TEST_REPORT_GENERATOR_SCRIPT = MODULES_DIR / "test_report_generator.py"
SUMMARY_SCRIPT = DIAGNOSTICS_DIR / "ai_diagnostics_summary.py"


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.stderr.strip()}"


def animate_message(message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è '...'. –í—Ä–µ–º—è –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è –¥–æ 2 —Å–µ–∫—É–Ω–¥."""
    for _ in range(3):  # –¢—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è
        for dots in range(1, 4):
            print(f"\r   {message}{'.' * dots}{' ' * (3 - dots)}", end="", flush=True)
            time.sleep(random.uniform(0.2, 0.5))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.2 –¥–æ 0.5 —Å–µ–∫—É–Ω–¥
    print(f"\r   {message} ü§ñ", flush=True)  # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π


def display_message_slowly(message):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ò–ò."""
    for line in message.split("\n"):
        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            time.sleep(0.03)
        print()
        time.sleep(0.1)


def generate_debug_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–±–∞–≥–≥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è debug_report."""
    print("")
    animate_message(" ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    command = [sys.executable, str(DEBUGGER_SCRIPT)]
    result = run_command(command)
    logger.debug(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ debug_report: {DEBUG_REPORT_PATH}")
    if not DEBUG_REPORT_PATH.exists():
        logger.warning(f"‚ö†Ô∏è Debug Report –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result}")
    else:
        logger.info(f"‚úÖ Debug Report —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")


def generate_test_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è test_report."""
    print("")
    animate_message(" ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
    command = [sys.executable, str(TEST_REPORT_GENERATOR_SCRIPT)]
    result = run_command(command)
    logger.debug(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ test_report: {TEST_REPORT_PATH}")
    if not TEST_REPORT_PATH.exists():
        logger.warning(f"‚ö†Ô∏è Test Report –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result}")
    else:
        logger.info(f"‚úÖ Test Report —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")


def parse_reports(debug_report_path, test_report_path, messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        with open(messages_db_path, "r", encoding="utf-8") as db_file:
            messages_db = json.load(db_file)
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª messages_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω:\n üìÇ  {messages_db_path}")
        return []

    findings = []

    # –ê–Ω–∞–ª–∏–∑ debug_report
    if debug_report_path.exists():
        with open(debug_report_path, "r", encoding="utf-8") as debug_file:
            debug_report = debug_file.read()
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Debug Report: {debug_report[:500]}...")  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            if "firewall-cmd --add-port" in debug_report:
                findings.append(messages_db.get("firewall_issue", {"title": "–û—à–∏–±–∫–∞ Firewall", "message": "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}))
    else:
        logger.warning(f"‚ö†Ô∏è Debug Report –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: {debug_report_path}")

    # –ê–Ω–∞–ª–∏–∑ test_report
    if test_report_path.exists():
        with open(test_report_path, "r", encoding="utf-8") as test_file:
            test_report = test_file.read()
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Test Report: {test_report[:500]}...")  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            if "Gradio: ‚ùå" in test_report:
                findings.append(messages_db.get("gradio_not_running", {"title": "Gradio Error", "message": "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}))
            if "Missing" in test_report:
                findings.append(messages_db.get("missing_files", {"title": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã", "message": "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}))
            if "user_records.json: ‚ùå" in test_report:
                findings.append(messages_db.get("missing_user_records", {"title": "–û—à–∏–±–∫–∞ Users", "message": "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}))
    else:
        logger.warning(f"‚ö†Ô∏è Test Report –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: {test_report_path}")

    return findings


def format_message(message, paths):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç—è–º–∏."""
    for key, path in paths.items():
        message = message.replace(f"{{{key}}}", str(path))
    return message


def display_analysis_result(title, message, paths):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    formatted_message = format_message(message, paths)
    display_message_slowly(f"\n   {title}\n   {'=' * (len(title) + 2)}\n")
    display_message_slowly(formatted_message)


def generate_summary_report():
    """–í—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    command = [sys.executable, str(SUMMARY_SCRIPT)]
    subprocess.run(command)


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")

    generate_debug_report()
    generate_test_report()

    animate_message(" üéâ  –ó–∞–≤–µ—Ä—à–∞—é –∞–Ω–∞–ª–∏–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ü§ñ ")
    display_message_slowly(f"\n üéØ  –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")

    paths = {
        "DEBUG_REPORT_PATH": DEBUG_REPORT_PATH,
        "TEST_REPORT_PATH": TEST_REPORT_PATH,
        "PROJECT_DIR": PROJECT_DIR,
    }
    findings = parse_reports(DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH)
    if findings:
        for finding in findings:
            display_analysis_result(finding["title"], finding["message"], paths)
    else:
        display_message_slowly(" ‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    print("\n")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generate_summary_report()


if __name__ == "__main__":
    main()
