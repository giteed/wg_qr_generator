#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º.
# –í–µ—Ä—Å–∏—è: 3.1
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-11-29

import json
import time
import sys
import subprocess
import random
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
AI_DIAGNOSTICS_DIR = PROJECT_ROOT / "ai_diagnostics"
MODULES_DIR = AI_DIAGNOSTICS_DIR / "modules"

sys.path.append(str(AI_DIAGNOSTICS_DIR))  # –î–æ–±–∞–≤–ª—è–µ–º ai_diagnostics
sys.path.append(str(MODULES_DIR))  # –î–æ–±–∞–≤–ª—è–µ–º ai_diagnostics/modules

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –º–æ–¥—É–ª–µ–π
from settings import DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH
from pause_rules import get_pause_rules, apply_pause


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.stderr.strip()}"


def animate_message(message):
    """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è '...'. –í—Ä–µ–º—è –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è –¥–æ 2 —Å–µ–∫—É–Ω–¥."""
    for _ in range(3):  # –¢—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–∏–≥–∏–≤–∞–Ω–∏—è
        for dots in range(1, 4):
            print(f"\r   {message}{'.' * dots}{' ' * (3 - dots)}", end="", flush=True)
            time.sleep(random.uniform(0.2, 0.5))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0.2 –¥–æ 0.5 —Å–µ–∫—É–Ω–¥
    print(f"\r   {message} ü§ñ", flush=True)  # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π


def display_message_slowly(message):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ò–ò —Å —É—á—ë—Ç–æ–º –ø–∞—É–∑."""
    rules = get_pause_rules()  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—É–∑
    for line in message.split("\n"):
        if not line.strip():  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            print("   ")
            apply_pause("\n", rules)  # –ü–∞—É–∑–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            continue

        print("   ", end="")
        for char in line:
            print(char, end="", flush=True)
            apply_pause(char, rules)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—É–∑—É –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        print()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        time.sleep(0.05)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏


def generate_debug_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–±–∞–≥–≥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ debug_report.txt."""
    print("")
    animate_message("ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    command = [sys.executable, PROJECT_ROOT / "modules" / "debugger.py"]
    run_command(command)
    display_message_slowly(
        f"""
‚úÖ  –û—Ç—á—ë—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω...
‚úÖ  –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\nüìÇ  {DEBUG_REPORT_PATH}
        """
    )


def generate_test_report():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è test_report.txt."""
    print("")
    animate_message("ü§ñ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
    command = [sys.executable, PROJECT_ROOT / "modules" / "test_report_generator.py"]
    run_command(command)
    display_message_slowly(
        f"""
‚úÖ  –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω...
‚úÖ  –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\nüìÇ  {TEST_REPORT_PATH}
        """
    )


def parse_reports(debug_report_path, test_report_path, messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    with open(messages_db_path, "r", encoding="utf-8") as db_file:
        messages_db = json.load(db_file)
    
    findings = []

    # –ê–Ω–∞–ª–∏–∑ debug_report
    with open(debug_report_path, "r", encoding="utf-8") as debug_file:
        debug_report = debug_file.read()
        if "firewall-cmd --add-port" in debug_report:
            findings.append(messages_db["firewall_issue"])
    
    # –ê–Ω–∞–ª–∏–∑ test_report
    with open(test_report_path, "r", encoding="utf-8") as test_file:
        test_report = test_file.read()
        if "Gradio: ‚ùå" in test_report:
            findings.append(messages_db["gradio_not_running"])
        if "Missing" in test_report:
            findings.append(messages_db["missing_files"])
    
    return findings


def get_paths_from_settings():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ –∏–∑ settings.py."""
    from settings import (
        BASE_DIR, PROJECT_DIR, WG_CONFIG_DIR, QR_CODE_DIR,
        USER_DB_PATH, DEBUG_REPORT_PATH, TEST_REPORT_PATH
    )
    return {
        "BASE_DIR": BASE_DIR,
        "PROJECT_DIR": PROJECT_DIR,
        "WG_CONFIG_DIR": WG_CONFIG_DIR,
        "QR_CODE_DIR": QR_CODE_DIR,
        "USER_DB_PATH": USER_DB_PATH,
        "DEBUG_REPORT_PATH": DEBUG_REPORT_PATH,
        "TEST_REPORT_PATH": TEST_REPORT_PATH
    }


def format_message(message, paths):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Ç—è–º–∏ –∏–∑ settings.py."""
    for key, path in paths.items():
        message = message.replace(f"{{{key}}}", str(path))
    return message


def display_analysis_result(title, message, paths):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –≤–≤–æ–¥–∞ –ò–ò."""
    formatted_message = format_message(message, paths)
    display_message_slowly(f"\n   {title}\n   {'=' * (len(title) + 2)}\n")
    display_message_slowly(formatted_message)


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    generate_debug_report()
    generate_test_report()

    animate_message("üéâ  –ó–∞–≤–µ—Ä—à–∞—é –∞–Ω–∞–ª–∏–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ü§ñ")
    display_message_slowly("üéØ  –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    paths = get_paths_from_settings()
    findings = parse_reports(DEBUG_REPORT_PATH, TEST_REPORT_PATH, MESSAGES_DB_PATH)
    if findings:
        for finding in findings:
            display_analysis_result(finding["title"], finding["message"], paths)
    else:
        display_message_slowly("‚úÖ  –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    print("\n")


if __name__ == "__main__":
    main()
