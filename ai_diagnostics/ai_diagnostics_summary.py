#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics_summary.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator.
# –í–µ—Ä—Å–∏—è: 1.0
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02

import json
import os
import subprocess
import matplotlib.pyplot as plt
from pathlib import Path

# –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parent.parent
LOGS_DIR = PROJECT_ROOT / "user" / "data" / "logs"
USER_DB_PATH = PROJECT_ROOT / "user" / "data" / "user_records.json"
WG_CONFIG_DIR = PROJECT_ROOT / "user" / "data" / "wg_configs"

def load_user_data(user_db_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_records.json."""
    if user_db_path.exists():
        with open(user_db_path, "r", encoding="utf-8") as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                print(" ‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å user_records.json.")
                return []
    else:
        print(" ‚ùå –§–∞–π–ª user_records.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return []

def count_wg_peers(wg_config_dir):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö WireGuard."""
    if not wg_config_dir.exists():
        print(" ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ WireGuard –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return 0
    return sum(1 for file in wg_config_dir.glob("*.conf"))

def check_gradio_port(port=7860):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ Gradio."""
    command = f"lsof -i:{port}"
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return result.returncode == 0

def generate_graph(user_count, peer_count):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ peer."""
    labels = ["Users", "Peers"]
    values = [user_count, peer_count]
    plt.bar(labels, values)
    plt.title("Users vs. Peers")
    plt.ylabel("Count")
    plt.savefig(LOGS_DIR / "users_vs_peers.png")
    print(f" üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {LOGS_DIR / 'users_vs_peers.png'}")

def generate_summary_report(user_count, peer_count, is_gradio_running):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç."""
    report = f"""
=== üìã –û–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===

üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}

üîí WireGuard:
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer: {peer_count}

üåê Gradio:
- –°—Ç–∞—Ç—É—Å: {"–ó–∞–ø—É—â–µ–Ω" if is_gradio_running else "–ù–µ –∑–∞–ø—É—â–µ–Ω"}
- –î–ª—è –∑–∞–ø—É—Å–∫–∞: 
  1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: cd {PROJECT_ROOT}
  2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: python3 main.py

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- –ï—Å–ª–∏ Gradio –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

"""
    summary_path = LOGS_DIR / "summary_report.txt"
    with open(summary_path, "w", encoding="utf-8") as file:
        file.write(report)
    print(f"üìÑ –û–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = load_user_data(USER_DB_PATH)
    user_count = len(user_data)

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer
    peer_count = count_wg_peers(WG_CONFIG_DIR)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gradio
    is_gradio_running = check_gradio_port()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    generate_graph(user_count, peer_count)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_summary_report(user_count, peer_count, is_gradio_running)

if __name__ == "__main__":
    main()
