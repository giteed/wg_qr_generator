import gradio as gr
import os
import json
import subprocess

# Utility functions
def create_user(username):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not username:
        return "–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    try:
        subprocess.run(["python3", "main.py", username], check=True)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"

def list_users():
    """–ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_records.json."""
    user_records_path = os.path.join("user", "data", "user_records.json")
    if not os.path.exists(user_records_path):
        return "‚ùå –§–∞–π–ª user_records.json –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        with open(user_records_path, "r") as f:
            user_data = json.load(f)

        if not user_data:
            return "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        users_list = []
        for username, details in user_data.items():
            user_info = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {details.get('created_at', 'N/A')}\n"
                f"   ‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {details.get('expires_at', 'N/A')}\n"
                f"   üåê –ê–¥—Ä–µ—Å: {details.get('address', 'N/A')}"
            )
            users_list.append(user_info)

        return "\n\n".join(users_list)

    except json.JSONDecodeError:
        return "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ user_records.json. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç."

def delete_user(username):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    user_records_path = os.path.join("user", "data", "user_records.json")
    user_file = os.path.join("user", "data", f"{username}.conf")

    if not os.path.exists(user_records_path):
        return "‚ùå –§–∞–π–ª user_records.json –Ω–µ –Ω–∞–π–¥–µ–Ω."

    if not os.path.exists(user_file):
        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON
        with open(user_records_path, "r") as f:
            user_data = json.load(f)

        if username in user_data:
            del user_data[username]
            with open(user_records_path, "w") as f:
                json.dump(user_data, f, indent=4)

        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(user_file)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"

# Gradio interface
with gr.Blocks() as admin_interface:
    gr.Markdown("## –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WireGuard")

    with gr.Row():
        with gr.Column():
            gr.Markdown("### –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            username_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            create_button = gr.Button("–°–æ–∑–¥–∞—Ç—å")
            create_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è")
            create_button.click(create_user, inputs=username_input, outputs=create_output)

        with gr.Column():
            gr.Markdown("### –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            list_button = gr.Button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            list_output = gr.Textbox(label="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", interactive=False)
            list_button.click(list_users, outputs=list_output)

    with gr.Row():
        gr.Markdown("### –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        delete_input = gr.Textbox(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å")
        delete_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è")
        delete_button.click(delete_user, inputs=delete_input, outputs=delete_output)

if __name__ == "__main__":
    admin_interface.launch(server_name="0.0.0.0", server_port=7860, share=True)
