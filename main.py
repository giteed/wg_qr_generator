#!/usr/bin/env python3
# main.py
## –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard

import sys
import os
import json
from datetime import datetime, timedelta
import settings
from modules.config import load_params
from modules.keygen import generate_private_key, generate_public_key, generate_preshared_key
from modules.ip_management import generate_ip
from modules.config_writer import add_user_to_server_config
from modules.qr_generator import generate_qr_code
from modules.directory_setup import setup_directories
from modules.client_config import create_client_config
from modules.main_registration_fields import create_user_record  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)-8s %(message)s",
    handlers=[logging.StreamHandler()]
)

DEBUG_EMOJI = "üêõ"
INFO_EMOJI = "‚ÑπÔ∏è"
WARNING_EMOJI = "‚ö†Ô∏è"
ERROR_EMOJI = "‚ùå"

class EmojiLoggerAdapter(logging.LoggerAdapter):
    def process(self, msg, kwargs):
        if kwargs.get('level', logging.INFO) == logging.DEBUG:
            msg = f"{DEBUG_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.INFO:
            msg = f"{INFO_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.WARNING:
            msg = f"{WARNING_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.ERROR:
            msg = f"{ERROR_EMOJI}  {msg}"
        return msg, kwargs

logger = EmojiLoggerAdapter(logging.getLogger(__name__), {})

def load_existing_users():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_records_path = os.path.join("user", "data", "user_records.json")
    if os.path.exists(user_records_path):
        with open(user_records_path, "r", encoding="utf-8") as file:
            try:
                user_data = json.load(file)
                return {user.lower(): user_data[user] for user in user_data}  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞
            except json.JSONDecodeError:
                logger.warning("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è.")
                return {}
    return {}

def add_user_record(user_record):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ JSON-—Ñ–∞–π–ª.
    """
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_record['username']} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    user_records_path = os.path.join("user", "data", "user_records.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    if os.path.exists(user_records_path):
        with open(user_records_path, "r", encoding="utf-8") as file:
            try:
                user_data = json.load(file)
            except json.JSONDecodeError:
                logger.warning("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è.")
                user_data = {}
    else:
        user_data = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if user_record["username"] in user_data:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{user_record['username']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{user_record['username']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    user_data[user_record["username"]] = user_record

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    os.makedirs(os.path.dirname(user_records_path), exist_ok=True)
    with open(user_records_path, "w", encoding="utf-8") as file:
        json.dump(user_data, file, indent=4)
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_record['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {user_records_path}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 main.py <nickname> [email] [telegram_id] [referral_id] [coupon_id]")
        sys.exit(1)

    nickname = sys.argv[1]
    email = sys.argv[2] if len(sys.argv) > 2 else "N/A"
    telegram_id = sys.argv[3] if len(sys.argv) > 3 else "N/A"
    referral_id = sys.argv[4] if len(sys.argv) > 4 else None
    coupon_id = sys.argv[5] if len(sys.argv) > 5 else None
    params_file = settings.PARAMS_FILE

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_users = load_existing_users()
    if nickname.lower() in existing_users:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{nickname}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        sys.exit(1)

    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.")
        setup_directories()

        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.")
        params = load_params(params_file)

        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        config_file = settings.SERVER_CONFIG_FILE
        private_key = generate_private_key()
        public_key = generate_public_key(private_key).decode()
        preshared_key = generate_preshared_key().decode()
        address, _ = generate_ip(config_file)

        qr_path = os.path.join(settings.QR_CODE_DIR, f"{nickname}.png")
        generate_qr_code("dummy_config_for_test", qr_path)  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

        user_record = create_user_record(
            username=nickname,
            address=address,
            public_key=public_key,
            preshared_key=preshared_key,
            qr_code_path=qr_path,
            email=email,
            telegram_id=telegram_id,
            referral_id=referral_id,
            coupon_id=coupon_id
        )

        add_user_record(user_record)

        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        logger.info(f"‚úÖ QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {qr_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
