#!/usr/bin/env python3
# wg_qr_generator/uninstall.py
# ===========================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è WireGuard
# ===========================================
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
# - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É WireGuard
# - –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# - –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å WireGuard
# - –£–¥–∞–ª—è–µ—Ç WireGuard –∏–∑ —Å–∏—Å—Ç–µ–º—ã
# - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator:
#   $ python3 uninstall.py
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
# - –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `settings.py`
# - –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–∞–π–ª, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ `LOG_FILE_PATH` –∏–∑ `settings.py`
# ===========================================
# –ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]
# –í–µ—Ä—Å–∏—è: 1.0
# –î–∞—Ç–∞: 2024-12-03
# ===========================================

import os
import subprocess
import shutil
import logging
from pathlib import Path

# Import project settings
try:
    from settings import (
        SERVER_CONFIG_FILE,
        PARAMS_FILE,
        WG_CONFIG_DIR,
        LOG_FILE_PATH,
        LOG_LEVEL,
        LOG_DIR,
    )
except ImportError:
    print("‚ùå Could not import settings. Ensure this script is run from the project root.")
    exit(1)

# Setup logging
logging.basicConfig(
    filename=LOG_FILE_PATH,
    level=getattr(logging, LOG_LEVEL, "INFO"),
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

def stop_wireguard():
    """Stop WireGuard service."""
    try:
        logger.info("Stopping WireGuard service...")
        subprocess.run(["systemctl", "stop", "wg-quick@wg0"], check=True)
        logger.info("WireGuard service stopped.")
    except subprocess.CalledProcessError as e:
        logger.error("Failed to stop WireGuard service: %s", e)
        print("‚ùå Failed to stop WireGuard service. Check logs for details.")
        return False
    return True

def remove_config_files():
    """Remove WireGuard configuration files."""
    try:
        if SERVER_CONFIG_FILE.exists():
            SERVER_CONFIG_FILE.unlink()
            logger.info(f"Removed server config file: {SERVER_CONFIG_FILE}")
        if PARAMS_FILE.exists():
            PARAMS_FILE.unlink()
            logger.info(f"Removed params file: {PARAMS_FILE}")
        if WG_CONFIG_DIR.exists():
            shutil.rmtree(WG_CONFIG_DIR)
            logger.info(f"Removed WireGuard user config directory: {WG_CONFIG_DIR}")
        print("‚úÖ Configuration files removed.")
    except Exception as e:
        logger.error("Failed to remove configuration files: %s", e)
        print("‚ùå Failed to remove configuration files. Check logs for details.")

def remove_firewall_rules():
    """Remove firewall rules associated with WireGuard."""
    try:
        logger.info("Removing WireGuard firewall rules...")
        subprocess.run(["firewall-cmd", "--zone=public", "--remove-interface=wg0"], check=True)
        subprocess.run(["firewall-cmd", "--remove-port=51820/udp"], check=True)
        print("‚úÖ Firewall rules removed.")
        logger.info("Firewall rules removed successfully.")
    except subprocess.CalledProcessError as e:
        logger.error("Failed to remove firewall rules: %s", e)
        print("‚ùå Failed to remove firewall rules. Check logs for details.")

def uninstall_wireguard():
    """Uninstall WireGuard."""
    try:
        logger.info("Uninstalling WireGuard...")
        subprocess.run(["apt", "remove", "-y", "wireguard"], check=True)
        subprocess.run(["apt", "autoremove", "-y"], check=True)
        print("‚úÖ WireGuard uninstalled successfully.")
        logger.info("WireGuard uninstalled successfully.")
    except subprocess.CalledProcessError as e:
        logger.error("Failed to uninstall WireGuard: %s", e)
        print("‚ùå Failed to uninstall WireGuard. Check logs for details.")

def confirm_action():
    """Ask for user confirmation before proceeding."""
    while True:
        choice = input("Are you sure you want to uninstall WireGuard? (yes/no): ").strip().lower()
        if choice in ["yes", "no"]:
            return choice == "yes"
        print("Please answer 'yes' or 'no'.")

def save_backup():
    """Save backup of configurations."""
    backup_dir = Path("wireguard_backup")
    if not backup_dir.exists():
        backup_dir.mkdir()
    try:
        if SERVER_CONFIG_FILE.exists():
            shutil.copy(SERVER_CONFIG_FILE, backup_dir / "wg0.conf")
        if PARAMS_FILE.exists():
            shutil.copy(PARAMS_FILE, backup_dir / "params")
        if WG_CONFIG_DIR.exists():
            shutil.copytree(WG_CONFIG_DIR, backup_dir / "wg_configs")
        print(f"‚úÖ Backup saved in {backup_dir}")
        logger.info(f"Backup saved successfully in {backup_dir}")
    except Exception as e:
        logger.error("Failed to save backup: %s", e)
        print("‚ùå Failed to save backup. Check logs for details.")

def main():
    """Main function to uninstall WireGuard."""
    print("=== üóëÔ∏è  Uninstall WireGuard ===")
    if not confirm_action():
        print("‚ùå Uninstallation cancelled.")
        return
    save_choice = input("Do you want to save a backup of the configurations? (yes/no): ").strip().lower()
    if save_choice == "yes":
        save_backup()
    if stop_wireguard():
        remove_config_files()
        remove_firewall_rules()
        uninstall_wireguard()
    print("üéâ WireGuard uninstallation complete!")

if __name__ == "__main__":
    main()
